Build instructions:
-------------------

This document describes how to compile the Arm Trusted Firmware (ATF) project for Marvell's platforms.
ATF documentation is available at 'docs' directory.

Build Instruction:
------------------

1. Download the ATF release <ARMATFV> from https://github.com/ARM-software/arm-trusted-firmware/archive/v1.2.tar.gz
2. Extract ATF tree with Marvell source:
	2.1. Extract ATF source code:
		# tar -xjf atf-<ARMATFV>.tar.bz2
		# mv atf-<ARMATFV> atf-<ARMATFV>-<MVATF>
	2.2. add Marvell code:
	- Option 1: Extracting the release zip file over the ATF tree:
		 Extract the atf-<ARMATFV>-<MVATF>.zip release file.
		# unzip atf-<ARMATFV>-<MVATF>.zip
		For example: unzip atf-1.2-2016_T1.0.eng_drop_v1.zip.
		This overrides part of the ATF source files and adds the relevant Marvell files.
		 When asked whether to replace a certain file, choose 'A' for all files that have such a conflict.
	- Option 2: Patch update:
		 Extract the git-<ARMATFV>-<MVATF>.zip to the destination folder atf-<ARMATFV>-<MVATF>.
		 Run the following git command in the atf-<ARMATFV>-<MVATF> folder:
		  git apply git-<version>-<release>/*.patch
3. Change directory 'cd' to the ATF directory.
4. Set the cross compiler:
	# export CROSS_COMPILE=/path/to/toolchain/aarch64-marvell-linux-gnu-
5. Set U-Boot image location (relativly to ATF root or absolute path)
	# export BL33=path/to/u-boot.bin
	For example: if U-Boot project (and its images) is located at ~/project/u-boot, BL33
				 should be ~/project/u-boot/u-boot.bin
	Note: u-boot.bin should be used and not u-boot-spl.bin
6. A3700 Only(Armada-3700 builds required WTP tools installation -
   Refer to the section "Tools installation for Armada-3700 builds"):
	Install ARM 32-bit cross compiler, which is required by building WTMI image for CM3.
	#sudo apt-get install gcc-arm-linux-gnueabi
7. Clean build residuals: (for non fresh builds)
	# make distclean
8. Build ATF:
	There are several build options:
	- DEBUG: default is without debug information (=0). in order to enable it use DEBUG=1
	- LOG_LEVEL: defines the level of logging which will be purged to the default output port.
				LOG_LEVEL_NONE		0
				LOG_LEVEL_NOTICE	10
				LOG_LEVEL_ERROR		20
				LOG_LEVEL_WARNING	30
				LOG_LEVEL_INFO		40
				LOG_LEVEL_VERBOSE	50
	- USE_COHERENT_MEM: This flag determines whether to include the coherent memory region in the
						BL memory map or not. It should be set to 0.
	- SECURE: For A3700 only, trusted(=1)/non trusted(=0) in wtp, default is non trusted.
	- CLOCKSPRESET: For A3700 only, the clock tree configuration preset
			including CPU and DDR frequency, default is CPU_800_DDR_800
				CPU_600_DDR3_600	-	CPU at 600 MHz, DDR3 at 600 MHz
				CPU_800_DDR3_800	-	CPU at 800 MHz, DDR3 at 800 MHz
				CPU_1000_DDR3_800	-	CPU at 1000 MHz, DDR3 at 800 MHz
				CPU_800_DDR4_800	-	CPU at 800 MHz, DDR4 at 800 MHz
				CPU_1000_DDR4_800	-	CPU at 1000 MHz, DDR4 at 800 MHz
	- BOOTDEV: For A3700 only, the flash boot device, default is SPINOR,
			Now A3700 only supports	SPINOR, SPINAND, EMMCNORM and SATA.
				SPINOR		- SPI NOR flash boot
				EMMCNORM	- eMMC Download Mode
						Download boot loader or program code from eMMC flash into CM3 or CA53
						Requires full initialization and command sequence
				SATA		- SATA device boot
	- PARTNUM: For A3700 only, the boot partition number, default is 0

	For example: in order to build the image in debug mode with log level up to 'notice' level run:
	# make DEBUG=1 USE_COHERENT_MEM=0 LOG_LEVEL=20 PLAT=<MARVELL_PLATFORM> all fip
	And if we want to build a A3700 image in debug mode with log level up to 'notice' level run,
	the image has the preset CPU at 600 MHz, preset DDR3 at 600 MHz, the image boot from SPI NOR
	flash partition 0, and the image is non trusted in wtp, the command line is as following:
	# make DEBUG=1 USE_COHERENT_MEM=0 LOG_LEVEL=20 SECURE=0 CLOCKSPRESET=CPU_600_DDR3_600 BOOTDEV=SPINOR
	PARTNUM=0 PLAT=<MARVELL_PLATFORM> all fip

	Supported MARVELL_PLATFORM are:
		apn806
		a7040_rz
		a70x0
		a70x0_cust (for customers)
		a3700_z

Special Build Flags:
--------------------
	- PALLADIUM: Enables building ATF for palladium target. This mainly involves changing the UART baud rate
	and the timer frequency to a lower values to match palladium's setup.

Build output:
-------------

	(for more information about build options, please refer to section 'Summary of build options' in  ATF user-guide:
	 https://github.com/ARM-software/arm-trusted-firmware/blob/master/docs/user-guide.md)


	Marvell's ATF compilation generates 6 files:
	bl1.bin			- BL1 image
	bl2.bin			- BL2 image
	bl31.bin		- BL31 image
	fip.bin			- FIP image (contains BL2, BL31 & BL33 (U-Boot) images)
	boot-image.bin	- ATF image (contains BL1 and FIP images)
	flash-image.bin	- Image which contains boot-image.bin and SPL image.

	flash-image.bin should be burnt/placed on the boot flash/device.

Tools installation for Armada-3700 builds:
------------------------------------------
1. Extract the tools/wtp/WTPTP_TOOLS_x_x_xx.zip into a temporary directory

   # cd tools/wtp
   # 7z x WTPTP_TOOLS_x_x_xx.zip

2. If required, add executable permissions to files in the extracted
   WTPTP_TOOLS_x_x_xx/Linux_Tools folder:

   # sudo chmod a+x WTPTP_TOOLS_x_x_xx/Linux_Tools/*.exe

3. Copy executable files from WTPTP_TOOLS_x_x_xx/Linux_Tools
   to location pointed to $PATH environment variable.
   For instance:

   # sudo cp WTPTP_TOOLS_x_x_xx/Linux_Tools/*.exe /usr/local/bin

4. Make sure the "ntbb_linux.exe" can be executed from any
   location and "make" passes without error.

5. Install a cross GNU ARM tool chain for building the WTMI binary.
   Any cross GNU ARM tool chain able to build ARM Cortex M3 binaries
   is suitable.
   On Debian/Uboot hosts the default GNU ARM tool chain can be installed
   using the following command:
   # sudo apt-get install gcc-arm-linux-gnueabi
   If required, the default tool chain prefix "arm-linux-gnueabi-" can be
   overwritten using environment variable CROSS_CM3.
   Example for BASH shell:
   # export CROSS_CM3=/opt/arm-cross/bin/arm-linux-gnueabi
