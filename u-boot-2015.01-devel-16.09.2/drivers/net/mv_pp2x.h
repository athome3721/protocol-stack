/*
* ***************************************************************************
* Copyright (C) 2016 Marvell International Ltd.
* ***************************************************************************
* This program is free software: you can redistribute it and/or modify it
* under the terms of the GNU General Public License as published by the Free
* Software Foundation, either version 2 of the License, or any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
* ***************************************************************************
*/

#include <common.h>
#include <net.h>
#include <netdev.h>
#include <config.h>
#include <malloc.h>
#include <asm/io.h>
#include <asm/errno.h>
#include <phy.h>
#include <miiphy.h>
#include <watchdog.h>
#include <linux/compat.h>
#include <linux/mbus.h>
#include <fdtdec.h>
#include <asm/arch-mvebu/fdt.h>
#include <pci.h>
#include <asm/arch-mvebu/mvebu.h>

#if !defined(CONFIG_PHYLIB)
# error Marvell mv_pp2x requires PHYLIB
#endif

#define MAX_CHIP_NUM 4

/* Some linux -> U-Boot compatibility stuff */
#define netdev_err(dev, fmt, args...)		\
	printf(fmt, ##args)
#define netdev_warn(dev, fmt, args...)		\
	printf(fmt, ##args)
#define netdev_info(dev, fmt, args...)		\
	printf(fmt, ##args)

#define CONFIG_NR_CPUS		1
#define BIT(nr)			(1UL << (nr))

/* rx buffer size */
#define BUFF_HDR_OFFS  32
#define BM_ALIGN       32
#define ETH_HLEN       14
#define ETH_ALEN       6
/* 2(HW hdr) 14(MAC hdr) 4(CRC) 32(extra for cache prefetch) */
#define WRAP			(2 + ETH_HLEN + 4 + 32)
#define MTU			1500
#define RX_BUFFER_SIZE		(ALIGN(MTU + WRAP, ARCH_DMA_MINALIGN))

#define MVPP2_SMI_TIMEOUT			10000

/* Coalescing */
#define MVPP2_TXDONE_COAL_PKTS		15
#define MVPP2_TXDONE_HRTIMER_PERIOD_NS	1000000UL
#define MVPP2_TXDONE_COAL_USEC		500

#define MVPP2_RX_COAL_PKTS		32
#define MVPP2_RX_COAL_USEC		100


/* Gop Register Start */
#define MVCPN110_GOP_MAC_NUM                4

/***********/
/*GMAC REGS */
/***********/

/* Port Mac Control0 */
#define MV_GMAC_PORT_CTRL0_REG			(0x0000)
#define MV_GMAC_PORT_CTRL0_PORTEN_OFFS		0
#define MV_GMAC_PORT_CTRL0_PORTEN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL0_PORTEN_OFFS)

#define MV_GMAC_PORT_CTRL0_PORTTYPE_OFFS		1
#define MV_GMAC_PORT_CTRL0_PORTTYPE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL0_PORTTYPE_OFFS)

#define MV_GMAC_PORT_CTRL0_FRAMESIZELIMIT_OFFS		2
#define MV_GMAC_PORT_CTRL0_FRAMESIZELIMIT_MASK    \
		(0x00001fff << MV_GMAC_PORT_CTRL0_FRAMESIZELIMIT_OFFS)

#define MV_GMAC_PORT_CTRL0_COUNT_EN_OFFS		15
#define MV_GMAC_PORT_CTRL0_COUNT_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL0_COUNT_EN_OFFS)


/* Port Mac Control1 */
#define MV_GMAC_PORT_CTRL1_REG			(0x0004)
#define MV_GMAC_PORT_CTRL1_EN_RX_CRC_CHECK_OFFS	0
#define MV_GMAC_PORT_CTRL1_EN_RX_CRC_CHECK_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_EN_RX_CRC_CHECK_OFFS)

#define MV_GMAC_PORT_CTRL1_EN_PERIODIC_FC_XON_OFFS		1
#define MV_GMAC_PORT_CTRL1_EN_PERIODIC_FC_XON_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_EN_PERIODIC_FC_XON_OFFS)

#define MV_GMAC_PORT_CTRL1_MGMII_MODE_OFFS		2
#define MV_GMAC_PORT_CTRL1_MGMII_MODE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_MGMII_MODE_OFFS)

#define MV_GMAC_PORT_CTRL1_PFC_CASCADE_PORT_ENABLE_OFFS		3
#define MV_GMAC_PORT_CTRL1_PFC_CASCADE_PORT_ENABLE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_PFC_CASCADE_PORT_ENABLE_OFFS)

#define MV_GMAC_PORT_CTRL1_DIS_EXCESSIVE_COL_OFFS		4
#define MV_GMAC_PORT_CTRL1_DIS_EXCESSIVE_COL_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_DIS_EXCESSIVE_COL_OFFS)

#define MV_GMAC_PORT_CTRL1_GMII_LOOPBACK_OFFS		5
#define MV_GMAC_PORT_CTRL1_GMII_LOOPBACK_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_GMII_LOOPBACK_OFFS)

#define MV_GMAC_PORT_CTRL1_PCS_LOOPBACK_OFFS		6
#define MV_GMAC_PORT_CTRL1_PCS_LOOPBACK_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_PCS_LOOPBACK_OFFS)

#define MV_GMAC_PORT_CTRL1_FC_SA_ADDR_LO_OFFS		7
#define MV_GMAC_PORT_CTRL1_FC_SA_ADDR_LO_MASK    \
		(0x000000ff << MV_GMAC_PORT_CTRL1_FC_SA_ADDR_LO_OFFS)

#define MV_GMAC_PORT_CTRL1_EN_SHORT_PREAMBLE_OFFS		15
#define MV_GMAC_PORT_CTRL1_EN_SHORT_PREAMBLE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL1_EN_SHORT_PREAMBLE_OFFS)


/* Port Mac Control2 */
#define MV_GMAC_PORT_CTRL2_REG			(0x0008)
#define MV_GMAC_PORT_CTRL2_SGMII_MODE_OFFS		0
#define MV_GMAC_PORT_CTRL2_SGMII_MODE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_SGMII_MODE_OFFS)

#define MV_GMAC_PORT_CTRL2_FC_MODE_OFFS		1
#define MV_GMAC_PORT_CTRL2_FC_MODE_MASK    \
		(0x00000003 << MV_GMAC_PORT_CTRL2_FC_MODE_OFFS)

#define MV_GMAC_PORT_CTRL2_PCS_EN_OFFS		3
#define MV_GMAC_PORT_CTRL2_PCS_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_PCS_EN_OFFS)

#define MV_GMAC_PORT_CTRL2_RGMII_MODE_OFFS		4
#define MV_GMAC_PORT_CTRL2_RGMII_MODE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_RGMII_MODE_OFFS)

#define MV_GMAC_PORT_CTRL2_DIS_PADING_OFFS		5
#define MV_GMAC_PORT_CTRL2_DIS_PADING_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_DIS_PADING_OFFS)

#define MV_GMAC_PORT_CTRL2_PORTMACRESET_OFFS		6
#define MV_GMAC_PORT_CTRL2_PORTMACRESET_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_PORTMACRESET_OFFS)

#define MV_GMAC_PORT_CTRL2_TX_DRAIN_OFFS		7
#define MV_GMAC_PORT_CTRL2_TX_DRAIN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_TX_DRAIN_OFFS)

#define MV_GMAC_PORT_CTRL2_EN_MII_ODD_PRE_OFFS		8
#define MV_GMAC_PORT_CTRL2_EN_MII_ODD_PRE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_EN_MII_ODD_PRE_OFFS)

#define MV_GMAC_PORT_CTRL2_CLK_125_BYPS_EN_OFFS		9
#define MV_GMAC_PORT_CTRL2_CLK_125_BYPS_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_CLK_125_BYPS_EN_OFFS)

#define MV_GMAC_PORT_CTRL2_PRBS_CHECK_EN_OFFS		10
#define MV_GMAC_PORT_CTRL2_PRBS_CHECK_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_PRBS_CHECK_EN_OFFS)

#define MV_GMAC_PORT_CTRL2_PRBS_GEN_EN_OFFS		11
#define MV_GMAC_PORT_CTRL2_PRBS_GEN_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_PRBS_GEN_EN_OFFS)

#define MV_GMAC_PORT_CTRL2_SELECT_DATA_TO_TX_OFFS		12
#define MV_GMAC_PORT_CTRL2_SELECT_DATA_TO_TX_MASK    \
		(0x00000003 << MV_GMAC_PORT_CTRL2_SELECT_DATA_TO_TX_OFFS)

#define MV_GMAC_PORT_CTRL2_EN_COL_ON_BP_OFFS		14
#define MV_GMAC_PORT_CTRL2_EN_COL_ON_BP_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_EN_COL_ON_BP_OFFS)

#define MV_GMAC_PORT_CTRL2_EARLY_REJECT_MODE_OFFS		15
#define MV_GMAC_PORT_CTRL2_EARLY_REJECT_MODE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL2_EARLY_REJECT_MODE_OFFS)


/* Port Auto-negotiation Configuration */
#define MV_GMAC_PORT_AUTO_NEG_CFG_REG			(0x000c)
#define MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_DOWN_OFFS		0
#define MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_DOWN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_DOWN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_UP_OFFS		1
#define MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_UP_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_FORCE_LINK_UP_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_PCS_AN_OFFS		2
#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_PCS_AN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_EN_PCS_AN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_AN_BYPASS_EN_OFFS		3
#define MV_GMAC_PORT_AUTO_NEG_CFG_AN_BYPASS_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_AN_BYPASS_EN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_INBAND_RESTARTAN_OFFS		4
#define MV_GMAC_PORT_AUTO_NEG_CFG_INBAND_RESTARTAN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_INBAND_RESTARTAN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_MII_SPEED_OFFS		5
#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_MII_SPEED_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_SET_MII_SPEED_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_GMII_SPEED_OFFS		6
#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_GMII_SPEED_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_SET_GMII_SPEED_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_AN_SPEED_OFFS		7
#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_AN_SPEED_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_EN_AN_SPEED_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_ADV_PAUSE_OFFS		9
#define MV_GMAC_PORT_AUTO_NEG_CFG_ADV_PAUSE_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_ADV_PAUSE_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_ADV_ASM_PAUSE_OFFS		10
#define MV_GMAC_PORT_AUTO_NEG_CFG_ADV_ASM_PAUSE_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_ADV_ASM_PAUSE_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_FC_AN_OFFS			11
#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_FC_AN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_EN_FC_AN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_FULL_DX_OFFS		12
#define MV_GMAC_PORT_AUTO_NEG_CFG_SET_FULL_DX_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_SET_FULL_DX_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_FDX_AN_OFFS		13
#define MV_GMAC_PORT_AUTO_NEG_CFG_EN_FDX_AN_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_EN_FDX_AN_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_PHY_MODE_OFFS		14
#define MV_GMAC_PORT_AUTO_NEG_CFG_PHY_MODE_MASK    \
		(0x00000001 << MV_GMAC_PORT_AUTO_NEG_CFG_PHY_MODE_OFFS)

#define MV_GMAC_PORT_AUTO_NEG_CFG_CHOOSE_SAMPLE_TX_CONFIG_OFFS		15
#define MV_GMAC_PORT_AUTO_NEG_CFG_CHOOSE_SAMPLE_TX_CONFIG_MASK		\
		(0x00000001 <<						\
		MV_GMAC_PORT_AUTO_NEG_CFG_CHOOSE_SAMPLE_TX_CONFIG_OFFS)

/* Port Status0 */
#define MV_GMAC_PORT_STATUS0_REG				(0x0010)
#define MV_GMAC_PORT_STATUS0_LINKUP_OFFS		0
#define MV_GMAC_PORT_STATUS0_LINKUP_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_LINKUP_OFFS)

#define MV_GMAC_PORT_STATUS0_GMIISPEED_OFFS		1
#define MV_GMAC_PORT_STATUS0_GMIISPEED_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_GMIISPEED_OFFS)

#define MV_GMAC_PORT_STATUS0_MIISPEED_OFFS		2
#define MV_GMAC_PORT_STATUS0_MIISPEED_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_MIISPEED_OFFS)

#define MV_GMAC_PORT_STATUS0_FULLDX_OFFS		3
#define MV_GMAC_PORT_STATUS0_FULLDX_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_FULLDX_OFFS)

#define MV_GMAC_PORT_STATUS0_RXFCEN_OFFS		4
#define MV_GMAC_PORT_STATUS0_RXFCEN_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_RXFCEN_OFFS)

#define MV_GMAC_PORT_STATUS0_TXFCEN_OFFS		5
#define MV_GMAC_PORT_STATUS0_TXFCEN_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_TXFCEN_OFFS)

#define MV_GMAC_PORT_STATUS0_PORTRXPAUSE_OFFS		6
#define MV_GMAC_PORT_STATUS0_PORTRXPAUSE_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_PORTRXPAUSE_OFFS)

#define MV_GMAC_PORT_STATUS0_PORTTXPAUSE_OFFS		7
#define MV_GMAC_PORT_STATUS0_PORTTXPAUSE_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_PORTTXPAUSE_OFFS)

#define MV_GMAC_PORT_STATUS0_PORTIS_DOINGPRESSURE_OFFS		8
#define MV_GMAC_PORT_STATUS0_PORTIS_DOINGPRESSURE_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_PORTIS_DOINGPRESSURE_OFFS)

#define MV_GMAC_PORT_STATUS0_PORTBUFFULL_OFFS		9
#define MV_GMAC_PORT_STATUS0_PORTBUFFULL_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_PORTBUFFULL_OFFS)

#define MV_GMAC_PORT_STATUS0_SYNCFAIL10MS_OFFS		10
#define MV_GMAC_PORT_STATUS0_SYNCFAIL10MS_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_SYNCFAIL10MS_OFFS)

#define MV_GMAC_PORT_STATUS0_ANDONE_OFFS		11
#define MV_GMAC_PORT_STATUS0_ANDONE_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_ANDONE_OFFS)

#define MV_GMAC_PORT_STATUS0_INBAND_AUTONEG_BYPASSACT_OFFS		12
#define MV_GMAC_PORT_STATUS0_INBAND_AUTONEG_BYPASSACT_MASK		\
		(0x00000001 <<						\
		MV_GMAC_PORT_STATUS0_INBAND_AUTONEG_BYPASSACT_OFFS)

#define MV_GMAC_PORT_STATUS0_SERDESPLL_LOCKED_OFFS		13
#define MV_GMAC_PORT_STATUS0_SERDESPLL_LOCKED_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_SERDESPLL_LOCKED_OFFS)

#define MV_GMAC_PORT_STATUS0_SYNCOK_OFFS		14
#define MV_GMAC_PORT_STATUS0_SYNCOK_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_SYNCOK_OFFS)

#define MV_GMAC_PORT_STATUS0_SQUELCHNOT_DETECTED_OFFS		15
#define MV_GMAC_PORT_STATUS0_SQUELCHNOT_DETECTED_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS0_SQUELCHNOT_DETECTED_OFFS)


/* Port Serial Parameters Configuration */
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_REG			(0x0014)
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_UNIDIRECTIONAL_ENABLE_OFFS	0
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_UNIDIRECTIONAL_ENABLE_MASK	\
		(0x00000001 <<						\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_UNIDIRECTIONAL_ENABLE_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_RETRANSMIT_COLLISION_DOMAIN_OFFS	1
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_RETRANSMIT_COLLISION_DOMAIN_MASK    \
		(0x00000001 <<						  \
		MV_GMAC_PORT_SERIAL_PARAM_CFG_RETRANSMIT_COLLISION_DOMAIN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PUMA2_BTS1444_EN_OFFS		2
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PUMA2_BTS1444_EN_MASK     \
		(0x00000001 <<					\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_PUMA2_BTS1444_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_FORWARD_802_3X_FC_EN_OFFS		3
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_FORWARD_802_3X_FC_EN_MASK    \
		(0x00000001 <<					   \
		MV_GMAC_PORT_SERIAL_PARAM_CFG_FORWARD_802_3X_FC_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_BP_EN_OFFS		4
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_BP_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERIAL_PARAM_CFG_BP_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_RX_NEGEDGE_SAMPLE_EN_OFFS		5
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_RX_NEGEDGE_SAMPLE_EN_MASK    \
		(0x00000001 <<					   \
		MV_GMAC_PORT_SERIAL_PARAM_CFG_RX_NEGEDGE_SAMPLE_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_COL_DOMAIN_LIMIT_OFFS		6
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_COL_DOMAIN_LIMIT_MASK     \
		(0x0000003f <<					\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_COL_DOMAIN_LIMIT_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PERIODIC_TYPE_SELECT_OFFS		12
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PERIODIC_TYPE_SELECT_MASK		\
		(0x00000001 <<						\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_PERIODIC_TYPE_SELECT_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PER_PRIORITY_FC_EN_OFFS		13
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_PER_PRIORITY_FC_EN_MASK		\
		(0x00000001 <<						\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_PER_PRIORITY_FC_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_TX_STANDARD_PRBS7_OFFS		14
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_TX_STANDARD_PRBS7_MASK    \
		(0x00000001 <<					\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_TX_STANDARD_PRBS7_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_CFG_REVERSE_PRBS_RX_OFFS		15
#define MV_GMAC_PORT_SERIAL_PARAM_CFG_REVERSE_PRBS_RX_MASK	\
		(0x00000001 <<					\
		MV_GMAC_PORT_SERIAL_PARAM_CFG_REVERSE_PRBS_RX_OFFS)


/* Port Fifo Configuration 0 */
#define MV_GMAC_PORT_FIFO_CFG_0_REG				(0x0018)
#define MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_HIGH_WM_OFFS		0
#define MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_HIGH_WM_MASK    \
		(0x000000ff << MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_HIGH_WM_OFFS)

#define MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_LOW_WM_OFFS		8
#define MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_LOW_WM_MASK    \
		(0x000000ff << MV_GMAC_PORT_FIFO_CFG_0_TX_FIFO_LOW_WM_OFFS)


/* Port Fifo Configuration 1 */
#define MV_GMAC_PORT_FIFO_CFG_1_REG				(0x001c)
#define MV_GMAC_PORT_FIFO_CFG_1_RX_FIFO_MAX_TH_OFFS		0
#define MV_GMAC_PORT_FIFO_CFG_1_RX_FIFO_MAX_TH_MASK    \
		(0x0000003f << MV_GMAC_PORT_FIFO_CFG_1_RX_FIFO_MAX_TH_OFFS)

#define MV_GMAC_PORT_FIFO_CFG_1_TX_FIFO_MIN_TH_OFFS		6
#define MV_GMAC_PORT_FIFO_CFG_1_TX_FIFO_MIN_TH_MASK    \
		(0x000000ff << MV_GMAC_PORT_FIFO_CFG_1_TX_FIFO_MIN_TH_OFFS)

#define MV_GMAC_PORT_FIFO_CFG_1_PORT_EN_FIX_EN_OFFS		15
#define MV_GMAC_PORT_FIFO_CFG_1_PORT_EN_FIX_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_FIFO_CFG_1_PORT_EN_FIX_EN_OFFS)


/* Port Serdes Configuration0 */
#define MV_GMAC_PORT_SERDES_CFG0_REG				(0x0028)
#define MV_GMAC_PORT_SERDES_CFG0_SERDESRESET_OFFS		0
#define MV_GMAC_PORT_SERDES_CFG0_SERDESRESET_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_SERDESRESET_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_PU_TX_OFFS		1
#define MV_GMAC_PORT_SERDES_CFG0_PU_TX_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_PU_TX_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_PU_RX_OFFS		2
#define MV_GMAC_PORT_SERDES_CFG0_PU_RX_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_PU_RX_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_PU_PLL_OFFS		3
#define MV_GMAC_PORT_SERDES_CFG0_PU_PLL_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_PU_PLL_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_PU_IVREF_OFFS		4
#define MV_GMAC_PORT_SERDES_CFG0_PU_IVREF_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_PU_IVREF_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_TESTEN_OFFS		5
#define MV_GMAC_PORT_SERDES_CFG0_TESTEN_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_TESTEN_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_DPHER_EN_OFFS		6
#define MV_GMAC_PORT_SERDES_CFG0_DPHER_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_DPHER_EN_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_RUDI_INVALID_ENABLE_OFFS		7
#define MV_GMAC_PORT_SERDES_CFG0_RUDI_INVALID_ENABLE_MASK    \
		(0x00000001 <<				     \
		MV_GMAC_PORT_SERDES_CFG0_RUDI_INVALID_ENABLE_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_ACK_OVERRIDE_ENABLE_OFFS		8
#define MV_GMAC_PORT_SERDES_CFG0_ACK_OVERRIDE_ENABLE_MASK    \
		(0x00000001 <<				     \
		MV_GMAC_PORT_SERDES_CFG0_ACK_OVERRIDE_ENABLE_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_CONFIG_WORD_ENABLE_OFFS		9
#define MV_GMAC_PORT_SERDES_CFG0_CONFIG_WORD_ENABLE_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_CONFIG_WORD_ENABLE_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_SYNC_FAIL_INT_ENABLE_OFFS		10
#define MV_GMAC_PORT_SERDES_CFG0_SYNC_FAIL_INT_ENABLE_MASK    \
		(0x00000001 <<				      \
		MV_GMAC_PORT_SERDES_CFG0_SYNC_FAIL_INT_ENABLE_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_MASTER_MODE_ENABLE_OFFS		11
#define MV_GMAC_PORT_SERDES_CFG0_MASTER_MODE_ENABLE_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_MASTER_MODE_ENABLE_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_TERM75_TX_OFFS		12
#define MV_GMAC_PORT_SERDES_CFG0_TERM75_TX_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_TERM75_TX_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_OUTAMP_OFFS		13
#define MV_GMAC_PORT_SERDES_CFG0_OUTAMP_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_OUTAMP_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_BTS712_FIX_EN_OFFS		14
#define MV_GMAC_PORT_SERDES_CFG0_BTS712_FIX_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_BTS712_FIX_EN_OFFS)

#define MV_GMAC_PORT_SERDES_CFG0_BTS156_FIX_EN_OFFS		15
#define MV_GMAC_PORT_SERDES_CFG0_BTS156_FIX_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_SERDES_CFG0_BTS156_FIX_EN_OFFS)


/* Port Serdes Configuration1 */
#define MV_GMAC_PORT_SERDES_CFG1_REG			(0x002c)
#define MV_GMAC_PORT_SERDES_CFG1_SMII_RX_10MB_CLK_EDGE_SEL_OFFS	0
#define MV_GMAC_PORT_SERDES_CFG1_SMII_RX_10MB_CLK_EDGE_SEL_MASK    \
		(0x00000001 <<					   \
		MV_GMAC_GMAC_PORT_SERDES_CFG1_SMII_RX_10MB_CLK_EDGE_SEL_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_SMII_TX_10MB_CLK_EDGE_SEL_OFFS	1
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_SMII_TX_10MB_CLK_EDGE_SEL_MASK    \
		(0x00000001 <<						\
		MV_GMAC_GMAC_PORT_SERDES_CFG1_SMII_TX_10MB_CLK_EDGE_SEL_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_MEN_OFFS		2
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_MEN_MASK    \
		(0x00000003 << MV_GMAC_GMAC_PORT_SERDES_CFG1_MEN_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_VCMS_OFFS		4
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_VCMS_MASK    \
		(0x00000001 << MV_GMAC_GMAC_PORT_SERDES_CFG1_VCMS_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_USE_SIGDET_OFFS		5
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_USE_SIGDET_MASK    \
		(0x00000001 <<					   \
		MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_USE_SIGDET_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_EN_CRS_MASK_TX_OFFS		6
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_EN_CRS_MASK_TX_MASK    \
		(0x00000001 <<				     \
		MV_GMAC_GMAC_PORT_SERDES_CFG1_EN_CRS_MASK_TX_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_ENABLE_OFFS		7
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_ENABLE_MASK    \
		(0x00000001 << MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_ENABLE_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_PHY_ADDRESS_OFFS	8
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_PHY_ADDRESS_MASK    \
		(0x0000001f <<					    \
		MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_PHY_ADDRESS_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SIGDET_POLARITY_OFFS	13
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SIGDET_POLARITY_MASK    \
		(0x00000001 <<						\
		MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SIGDET_POLARITY_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_INTERRUPT_POLARITY_OFFS	14
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_INTERRUPT_POLARITY_MASK    \
		(0x00000001 <<						   \
		MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_INTERRUPT_POLARITY_OFFS)

#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SERDES_POLARITY_OFFS	15
#define MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SERDES_POLARITY_MASK    \
		(0x00000001 <<						\
		MV_GMAC_GMAC_PORT_SERDES_CFG1_100FX_PCS_SERDES_POLARITY_OFFS)

/* Port Serdes Configuration2 */
#define MV_GMAC_PORT_SERDES_CFG2_REG				(0x0030)
#define MV_GMAC_PORT_SERDES_CFG2_AN_ADV_CONFIGURATION_OFFS	0
#define MV_GMAC_PORT_SERDES_CFG2_AN_ADV_CONFIGURATION_MASK    \
		(0x0000ffff <<				\
		MV_GMAC_PORT_SERDES_CFG2_AN_ADV_CONFIGURATION_OFFS)

/* Port Serdes Configuration3 */
#define MV_GMAC_PORT_SERDES_CFG3_REG				(0x0034)
#define MV_GMAC_PORT_SERDES_CFG3_ABILITY_MATCH_STATUS_OFFS		0
#define MV_GMAC_PORT_SERDES_CFG3_ABILITY_MATCH_STATUS_MASK      \
		(0x0000ffff <<					\
		MV_GMAC_PORT_SERDES_CFG3_ABILITY_MATCH_STATUS_OFFS)

/* Port Prbs Status */
#define MV_GMAC_PORT_PRBS_STATUS_REG				(0x0038)
#define MV_GMAC_PORT_PRBS_STATUS_PRBSCHECK_LOCKED_OFFS		0
#define MV_GMAC_PORT_PRBS_STATUS_PRBSCHECK_LOCKED_MASK    \
		(0x00000001 << MV_GMAC_PORT_PRBS_STATUS_PRBSCHECK_LOCKED_OFFS)

#define MV_GMAC_PORT_PRBS_STATUS_PRBSCHECKRDY_OFFS		1
#define MV_GMAC_PORT_PRBS_STATUS_PRBSCHECKRDY_MASK    \
		(0x00000001 << MV_GMAC_PORT_PRBS_STATUS_PRBSCHECKRDY_OFFS)


/* Port Prbs Error Counter */
#define MV_GMAC_PORT_PRBS_ERR_CNTR_REG				(0x003c)
#define MV_GMAC_PORT_PRBS_ERR_CNTR_PRBSBITERRCNT_OFFS		0
#define MV_GMAC_PORT_PRBS_ERR_CNTR_PRBSBITERRCNT_MASK    \
		(0x0000ffff << MV_GMAC_PORT_PRBS_ERR_CNTR_PRBSBITERRCNT_OFFS)


/* Port Status1 */
#define MV_GMAC_PORT_STATUS1_REG				(0x0040)
#define MV_GMAC_PORT_STATUS1_MEDIAACTIVE_OFFS		0
#define MV_GMAC_PORT_STATUS1_MEDIAACTIVE_MASK    \
		(0x00000001 << MV_GMAC_PORT_STATUS1_MEDIAACTIVE_OFFS)


/* Port Mib Counters Control */
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_REG			(0x0044)
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_COPY_TRIGGER_OFFS	0
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_COPY_TRIGGER_MASK	\
		(0x00000001 <<					\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_COPY_TRIGGER_OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_CLEAR_ON_READ__OFFS		1
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_CLEAR_ON_READ__MASK    \
		(0x00000001 <<					\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_CLEAR_ON_READ__OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_RX_HISTOGRAM_EN_OFFS		2
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_RX_HISTOGRAM_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_MIB_CNTRS_CTRL_RX_HISTOGRAM_EN_OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_TX_HISTOGRAM_EN_OFFS		3
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_TX_HISTOGRAM_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_MIB_CNTRS_CTRL_TX_HISTOGRAM_EN_OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__OFFS	4
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__MASK	\
		(0x00000001 <<						\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_XCAT_BTS_340_EN__OFFS		5
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_XCAT_BTS_340_EN__MASK	\
		(0x00000001 <<					\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_XCAT_BTS_340_EN__OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_OFFS		6
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_MASK	\
		(0x00000001 <<					\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_OFFS)

#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_OFFS		7
#define MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_MASK  \
		(0x00000001 <<					\
		MV_GMAC_PORT_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_OFFS)


/* Port Mac Control3 */
#define MV_GMAC_PORT_CTRL3_REG				(0x0048)
#define MV_GMAC_PORT_CTRL3_BUF_SIZE_OFFS		0
#define MV_GMAC_PORT_CTRL3_BUF_SIZE_MASK    \
		(0x0000003f << MV_GMAC_PORT_CTRL3_BUF_SIZE_OFFS)

#define MV_GMAC_PORT_CTRL3_IPG_DATA_OFFS		6
#define MV_GMAC_PORT_CTRL3_IPG_DATA_MASK    \
		(0x000001ff << MV_GMAC_PORT_CTRL3_IPG_DATA_OFFS)

#define MV_GMAC_PORT_CTRL3_LLFC_GLOBAL_FC_ENABLE_OFFS		15
#define MV_GMAC_PORT_CTRL3_LLFC_GLOBAL_FC_ENABLE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL3_LLFC_GLOBAL_FC_ENABLE_OFFS)


/* QSGMII */
#define MV_GMAC_QSGMII_REG				(0x004c)
#define MV_GMAC_QSGMII_QSGMII_REG_OFFS		0
#define MV_GMAC_QSGMII_QSGMII_REG_MASK    \
		(0x0000ffff << MV_GMAC_QSGMII_QSGMII_REG_OFFS)


/* Qsgmii Status */
#define MV_GMAC_QSGMII_STATUS_REG				(0x0050)
#define MV_GMAC_QSGMII_STATUS_QSGMII_STATUS_OFFS		0
#define MV_GMAC_QSGMII_STATUS_QSGMII_STATUS_MASK    \
		(0x000000ff << MV_GMAC_QSGMII_STATUS_QSGMII_STATUS_OFFS)


/* Qsgmii Prbs Counter */
#define MV_GMAC_QSGMII_PRBS_CNTR_REG			(0x0054)
#define MV_GMAC_QSGMII_PRBS_CNTR_QSGMII_PRBS_ERR_CNT_REG_OFFS		0
#define MV_GMAC_QSGMII_PRBS_CNTR_QSGMII_PRBS_ERR_CNT_REG_MASK   \
		(0x0000ffff <<					\
		MV_GMAC_QSGMII_PRBS_CNTR_QSGMII_PRBS_ERR_CNT_REG_OFFS)


/* Ccfc Port Speed Timer%p */
#define MV_GMAC_CCFC_PORT_SPEED_TIMER_REG(t)		(0x0058 + t*4)
#define MV_GMAC_CCFC_PORT_SPEED_TIMER_PORTSPEEDTIMER_OFFS		0
#define MV_GMAC_CCFC_PORT_SPEED_TIMER_PORTSPEEDTIMER_MASK	\
		(0x0000ffff <<					\
		MV_GMAC_CCFC_PORT_SPEED_TIMER_PORTSPEEDTIMER_OFFS)


/* Fc Dsa Tag %n */
#define MV_GMAC_FC_DSA_TAG_REG(n)			(0x0078 + 4*n)
#define MV_GMAC_FC_DSA_TAG_DSATAGREGN_OFFS		0
#define MV_GMAC_FC_DSA_TAG_DSATAGREGN_MASK    \
		(0x0000ffff << MV_GMAC_FC_DSA_TAG_DSATAGREGN_OFFS)


/* Link Level Flow Control Window Reg 0 */
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_0		(0x0088)
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_0_LLFC_FC_WINDOW_REG0_OFFS   0
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_0_LLFC_FC_WINDOW_REG0_MASK    \
	(0x0000ffff <<							      \
	MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_0_LLFC_FC_WINDOW_REG0_OFFS)


/* Link Level Flow Control Window Reg 1 */
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1		(0x008c)
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_FC_WINDOW_REG1_OFFS    0
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_FC_WINDOW_REG1_MASK    \
	(0x00007fff <<							      \
	MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_FC_WINDOW_REG1_OFFS)

#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_RATE_LIMIT_EN_OFFS     15
#define MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_RATE_LIMIT_EN_MASK    \
	(0x00000001 <<							     \
	MV_GMAC_LINK_LEVEL_FLOW_CTRL_WINDOW_REG_1_LLFC_RATE_LIMIT_EN_OFFS)


/* Port Mac Control4 */
#define MV_GMAC_PORT_CTRL4_REG				(0x0090)
#define MV_GMAC_PORT_CTRL4_EXT_PIN_GMII_SEL_OFFS		0
#define MV_GMAC_PORT_CTRL4_EXT_PIN_GMII_SEL_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_EXT_PIN_GMII_SEL_OFFS)

#define MV_GMAC_PORT_CTRL4_PREAMBLE_FIX_OFFS		1
#define MV_GMAC_PORT_CTRL4_PREAMBLE_FIX_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_PREAMBLE_FIX_OFFS)

#define MV_GMAC_PORT_CTRL4_SQ_DETECT_FIX_EN_OFFS		2
#define MV_GMAC_PORT_CTRL4_SQ_DETECT_FIX_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_SQ_DETECT_FIX_EN_OFFS)

#define MV_GMAC_PORT_CTRL4_FC_EN_RX_OFFS		3
#define MV_GMAC_PORT_CTRL4_FC_EN_RX_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_FC_EN_RX_OFFS)

#define MV_GMAC_PORT_CTRL4_FC_EN_TX_OFFS		4
#define MV_GMAC_PORT_CTRL4_FC_EN_TX_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_FC_EN_TX_OFFS)

#define MV_GMAC_PORT_CTRL4_DP_CLK_SEL_OFFS		5
#define MV_GMAC_PORT_CTRL4_DP_CLK_SEL_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_DP_CLK_SEL_OFFS)

#define MV_GMAC_PORT_CTRL4_SYNC_BYPASS_OFFS		6
#define MV_GMAC_PORT_CTRL4_SYNC_BYPASS_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_SYNC_BYPASS_OFFS)

#define MV_GMAC_PORT_CTRL4_QSGMII_BYPASS_ACTIVE_OFFS		7
#define MV_GMAC_PORT_CTRL4_QSGMII_BYPASS_ACTIVE_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_QSGMII_BYPASS_ACTIVE_OFFS)

#define MV_GMAC_PORT_CTRL4_COUNT_EXTERNAL_FC_EN_OFFS		8
#define MV_GMAC_PORT_CTRL4_COUNT_EXTERNAL_FC_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_COUNT_EXTERNAL_FC_EN_OFFS)

#define MV_GMAC_PORT_CTRL4_MARVELL_HEADER_EN_OFFS		9
#define MV_GMAC_PORT_CTRL4_MARVELL_HEADER_EN_MASK    \
		(0x00000001 << MV_GMAC_PORT_CTRL4_MARVELL_HEADER_EN_OFFS)

#define MV_GMAC_PORT_CTRL4_LEDS_NUMBER_OFFS		10
#define MV_GMAC_PORT_CTRL4_LEDS_NUMBER_MASK    \
		(0x0000003f << MV_GMAC_PORT_CTRL4_LEDS_NUMBER_OFFS)


/* Port Serial Parameters 1 Configuration */
#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_REG			(0x0094)
#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_RX_STANDARD_PRBS7_OFFS		0
#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_RX_STANDARD_PRBS7_MASK    \
		(0x00000001 <<					  \
		MV_GMAC_PORT_SERIAL_PARAM_1_CFG_RX_STANDARD_PRBS7_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_PFC_EN_OFFS		1
#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_PFC_EN_MASK    \
		(0x00000001 <<					\
		MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_PFC_EN_OFFS)

#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_UNKNOWN_FC_EN_OFFS	2
#define MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_UNKNOWN_FC_EN_MASK	\
		(0x00000001 <<						\
		MV_GMAC_PORT_SERIAL_PARAM_1_CFG_FORWARD_UNKNOWN_FC_EN_OFFS)


/* Lpi Control 0 */
#define MV_GMAC_LPI_CTRL_0_REG				(0x00c0)
#define MV_GMAC_LPI_CTRL_0_LI_LIMIT_OFFS		0
#define MV_GMAC_LPI_CTRL_0_LI_LIMIT_MASK    \
		(0x000000ff << MV_GMAC_LPI_CTRL_0_LI_LIMIT_OFFS)

#define MV_GMAC_LPI_CTRL_0_TS_LIMIT_OFFS		8
#define MV_GMAC_LPI_CTRL_0_TS_LIMIT_MASK    \
		(0x000000ff << MV_GMAC_LPI_CTRL_0_TS_LIMIT_OFFS)


/* Lpi Control 1 */
#define MV_GMAC_LPI_CTRL_1_REG				(0x00c4)
#define MV_GMAC_LPI_CTRL_1_LPI_REQUEST_EN_OFFS		0
#define MV_GMAC_LPI_CTRL_1_LPI_REQUEST_EN_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_1_LPI_REQUEST_EN_OFFS)

#define MV_GMAC_LPI_CTRL_1_LPI_REQUEST_FORCE_OFFS		1
#define MV_GMAC_LPI_CTRL_1_LPI_REQUEST_FORCE_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_1_LPI_REQUEST_FORCE_OFFS)

#define MV_GMAC_LPI_CTRL_1_LPI_MANUAL_MODE_OFFS		2
#define MV_GMAC_LPI_CTRL_1_LPI_MANUAL_MODE_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_1_LPI_MANUAL_MODE_OFFS)

#define MV_GMAC_LPI_CTRL_1_EN_GTX_CLK_HALT_OFFS		3
#define MV_GMAC_LPI_CTRL_1_EN_GTX_CLK_HALT_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_1_EN_GTX_CLK_HALT_OFFS)

#define MV_GMAC_LPI_CTRL_1_TW_LIMIT_OFFS		4
#define MV_GMAC_LPI_CTRL_1_TW_LIMIT_MASK    \
		(0x00000fff << MV_GMAC_LPI_CTRL_1_TW_LIMIT_OFFS)


/* Lpi Control 2 */
#define MV_GMAC_LPI_CTRL_2_REG				(0x00c8)
#define MV_GMAC_LPI_CTRL_2_LPI_CLK_DIV_OFFS		0
#define MV_GMAC_LPI_CTRL_2_LPI_CLK_DIV_MASK    \
		(0x0000007f << MV_GMAC_LPI_CTRL_2_LPI_CLK_DIV_OFFS)

#define MV_GMAC_LPI_CTRL_2_PCS_RX_ER_MASK_DISABLE_OFFS		7
#define MV_GMAC_LPI_CTRL_2_PCS_RX_ER_MASK_DISABLE_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_2_PCS_RX_ER_MASK_DISABLE_OFFS)

#define MV_GMAC_LPI_CTRL_2_EN_GMII2MII_LPI_FIX_OFFS		8
#define MV_GMAC_LPI_CTRL_2_EN_GMII2MII_LPI_FIX_MASK    \
		(0x00000001 << MV_GMAC_LPI_CTRL_2_EN_GMII2MII_LPI_FIX_OFFS)


/* Lpi Status */
#define MV_GMAC_LPI_STATUS_REG				(0x00cc)
#define MV_GMAC_LPI_STATUS_PCS_RX_LPI_STATUS_OFFS		0
#define MV_GMAC_LPI_STATUS_PCS_RX_LPI_STATUS_MASK    \
		(0x00000001 << MV_GMAC_LPI_STATUS_PCS_RX_LPI_STATUS_OFFS)

#define MV_GMAC_LPI_STATUS_PCS_TX_LPI_STATUS_OFFS		1
#define MV_GMAC_LPI_STATUS_PCS_TX_LPI_STATUS_MASK    \
		(0x00000001 << MV_GMAC_LPI_STATUS_PCS_TX_LPI_STATUS_OFFS)

#define MV_GMAC_LPI_STATUS_MAC_RX_LP_IDLE_STATUS_OFFS		2
#define MV_GMAC_LPI_STATUS_MAC_RX_LP_IDLE_STATUS_MASK    \
		(0x00000001 << MV_GMAC_LPI_STATUS_MAC_RX_LP_IDLE_STATUS_OFFS)

#define MV_GMAC_LPI_STATUS_MAC_TX_LP_WAIT_STATUS_OFFS		3
#define MV_GMAC_LPI_STATUS_MAC_TX_LP_WAIT_STATUS_MASK    \
		(0x00000001 << MV_GMAC_LPI_STATUS_MAC_TX_LP_WAIT_STATUS_OFFS)

#define MV_GMAC_LPI_STATUS_MAC_TX_LP_IDLE_STATUS_OFFS		4
#define MV_GMAC_LPI_STATUS_MAC_TX_LP_IDLE_STATUS_MASK    \
		(0x00000001 << MV_GMAC_LPI_STATUS_MAC_TX_LP_IDLE_STATUS_OFFS)


/* Lpi Counter */
#define MV_GMAC_LPI_CNTR_REG				(0x00d0)
#define MV_GMAC_LPI_CNTR_LPI_COUNTER_OFFS		0
#define MV_GMAC_LPI_CNTR_LPI_COUNTER_MASK    \
		(0x0000ffff << MV_GMAC_LPI_CNTR_LPI_COUNTER_OFFS)


/* Pulse 1 Ms Low */
#define MV_GMAC_PULSE_1_MS_LOW_REG			(0x00d4)
#define MV_GMAC_PULSE_1_MS_LOW_PULSE_1MS_MAX_LOW_OFFS		0
#define MV_GMAC_PULSE_1_MS_LOW_PULSE_1MS_MAX_LOW_MASK    \
		(0x0000ffff << MV_GMAC_PULSE_1_MS_LOW_PULSE_1MS_MAX_LOW_OFFS)


/* Pulse 1 Ms High */
#define MV_GMAC_PULSE_1_MS_HIGH_REG			(0x00d8)
#define MV_GMAC_PULSE_1_MS_HIGH_PULSE_1MS_MAX_HIGH_OFFS		0
#define MV_GMAC_PULSE_1_MS_HIGH_PULSE_1MS_MAX_HIGH_MASK    \
		(0x0000ffff << MV_GMAC_PULSE_1_MS_HIGH_PULSE_1MS_MAX_HIGH_OFFS)

/* Port Interrupt Cause */
#define MV_GMAC_INTERRUPT_CAUSE_REG			(0x0020)
/* Port Interrupt Mask */
#define MV_GMAC_INTERRUPT_MASK_REG			(0x0024)
#define MV_GMAC_INTERRUPT_CAUSE_LINK_CHANGE_OFFS		1
#define MV_GMAC_INTERRUPT_CAUSE_LINK_CHANGE_MASK	\
		(0x1 << MV_GMAC_INTERRUPT_CAUSE_LINK_CHANGE_OFFS)

/* Port Interrupt Summary Cause */
#define MV_GMAC_INTERRUPT_SUM_CAUSE_REG			(0x00A0)
/* Port Interrupt Summary Mask */
#define MV_GMAC_INTERRUPT_SUM_MASK_REG			(0x00A4)
#define MV_GMAC_INTERRUPT_SUM_CAUSE_LINK_CHANGE_OFFS		1
#define MV_GMAC_INTERRUPT_SUM_CAUSE_LINK_CHANGE_MASK	\
		(0x1 << MV_GMAC_INTERRUPT_SUM_CAUSE_LINK_CHANGE_OFFS)

/**************/
/* XLGMAC REGS  */
/**************/


/* Port Mac Control0 */
#define MV_XLG_PORT_MAC_CTRL0_REG			(0x0000)
#define MV_XLG_MAC_CTRL0_PORTEN_OFFS		0
#define MV_XLG_MAC_CTRL0_PORTEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_PORTEN_OFFS)

#define MV_XLG_MAC_CTRL0_MACRESETN_OFFS		1
#define MV_XLG_MAC_CTRL0_MACRESETN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_MACRESETN_OFFS)

#define MV_XLG_MAC_CTRL0_FORCELINKDOWN_OFFS		2
#define MV_XLG_MAC_CTRL0_FORCELINKDOWN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_FORCELINKDOWN_OFFS)

#define MV_XLG_MAC_CTRL0_FORCELINKPASS_OFFS		3
#define MV_XLG_MAC_CTRL0_FORCELINKPASS_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_FORCELINKPASS_OFFS)

#define MV_XLG_MAC_CTRL0_TXIPGMODE_OFFS		5
#define MV_XLG_MAC_CTRL0_TXIPGMODE_MASK    \
		(0x00000003 << MV_XLG_MAC_CTRL0_TXIPGMODE_OFFS)

#define MV_XLG_MAC_CTRL0_RXFCEN_OFFS		7
#define MV_XLG_MAC_CTRL0_RXFCEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_RXFCEN_OFFS)

#define MV_XLG_MAC_CTRL0_TXFCEN_OFFS		8
#define MV_XLG_MAC_CTRL0_TXFCEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_TXFCEN_OFFS)

#define MV_XLG_MAC_CTRL0_RXCRCCHECKEN_OFFS		9
#define MV_XLG_MAC_CTRL0_RXCRCCHECKEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_RXCRCCHECKEN_OFFS)

#define MV_XLG_MAC_CTRL0_PERIODICXONEN_OFFS		10
#define MV_XLG_MAC_CTRL0_PERIODICXONEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_PERIODICXONEN_OFFS)

#define MV_XLG_MAC_CTRL0_RXCRCSTRIPEN_OFFS		11
#define MV_XLG_MAC_CTRL0_RXCRCSTRIPEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_RXCRCSTRIPEN_OFFS)

#define MV_XLG_MAC_CTRL0_PADDINGDIS_OFFS		13
#define MV_XLG_MAC_CTRL0_PADDINGDIS_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_PADDINGDIS_OFFS)

#define MV_XLG_MAC_CTRL0_MIBCNTDIS_OFFS		14
#define MV_XLG_MAC_CTRL0_MIBCNTDIS_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_MIBCNTDIS_OFFS)

#define MV_XLG_MAC_CTRL0_PFC_CASCADE_PORT_ENABLE_OFFS		15
#define MV_XLG_MAC_CTRL0_PFC_CASCADE_PORT_ENABLE_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL0_PFC_CASCADE_PORT_ENABLE_OFFS)


/* Port Mac Control1 */
#define MV_XLG_PORT_MAC_CTRL1_REG			(0x0004)
#define MV_XLG_MAC_CTRL1_FRAMESIZELIMIT_OFFS		0
#define MV_XLG_MAC_CTRL1_FRAMESIZELIMIT_MASK    \
		(0x00001fff << MV_XLG_MAC_CTRL1_FRAMESIZELIMIT_OFFS)

#define MV_XLG_MAC_CTRL1_MACLOOPBACKEN_OFFS		13
#define MV_XLG_MAC_CTRL1_MACLOOPBACKEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL1_MACLOOPBACKEN_OFFS)

#define MV_XLG_MAC_CTRL1_XGMIILOOPBACKEN_OFFS		14
#define MV_XLG_MAC_CTRL1_XGMIILOOPBACKEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL1_XGMIILOOPBACKEN_OFFS)

#define MV_XLG_MAC_CTRL1_LOOPBACKCLOCKSELECT_OFFS		15
#define MV_XLG_MAC_CTRL1_LOOPBACKCLOCKSELECT_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL1_LOOPBACKCLOCKSELECT_OFFS)


/* Port Mac Control2 */
#define MV_XLG_PORT_MAC_CTRL2_REG		(0x0008)
#define MV_XLG_MAC_CTRL2_SALOW_7_0_OFFS		0
#define MV_XLG_MAC_CTRL2_SALOW_7_0_MASK    \
		(0x000000ff << MV_XLG_MAC_CTRL2_SALOW_7_0_OFFS)

#define MV_XLG_MAC_CTRL2_UNIDIRECTIONALEN_OFFS		8
#define MV_XLG_MAC_CTRL2_UNIDIRECTIONALEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL2_UNIDIRECTIONALEN_OFFS)

#define MV_XLG_MAC_CTRL2_FIXEDIPGBASE_OFFS		9
#define MV_XLG_MAC_CTRL2_FIXEDIPGBASE_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL2_FIXEDIPGBASE_OFFS)

#define MV_XLG_MAC_CTRL2_PERIODICXOFFEN_OFFS		10
#define MV_XLG_MAC_CTRL2_PERIODICXOFFEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL2_PERIODICXOFFEN_OFFS)

#define MV_XLG_MAC_CTRL2_SIMPLEXMODEEN_OFFS		13
#define MV_XLG_MAC_CTRL2_SIMPLEXMODEEN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL2_SIMPLEXMODEEN_OFFS)

#define MV_XLG_MAC_CTRL2_FC_MODE_OFFS		14
#define MV_XLG_MAC_CTRL2_FC_MODE_MASK    \
		(0x00000003 << MV_XLG_MAC_CTRL2_FC_MODE_OFFS)


/* Port Status */
#define MV_XLG_MAC_PORT_STATUS_REG		(0x000c)
#define MV_XLG_MAC_PORT_STATUS_LINKSTATUS_OFFS		0
#define MV_XLG_MAC_PORT_STATUS_LINKSTATUS_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_LINKSTATUS_OFFS)

#define MV_XLG_MAC_PORT_STATUS_REMOTEFAULT_OFFS		1
#define MV_XLG_MAC_PORT_STATUS_REMOTEFAULT_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_REMOTEFAULT_OFFS)

#define MV_XLG_MAC_PORT_STATUS_LOCALFAULT_OFFS		2
#define MV_XLG_MAC_PORT_STATUS_LOCALFAULT_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_LOCALFAULT_OFFS)

#define MV_XLG_MAC_PORT_STATUS_LINKSTATUSCLEAN_OFFS		3
#define MV_XLG_MAC_PORT_STATUS_LINKSTATUSCLEAN_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_LINKSTATUSCLEAN_OFFS)

#define MV_XLG_MAC_PORT_STATUS_LOCALFAULTCLEAN_OFFS		4
#define MV_XLG_MAC_PORT_STATUS_LOCALFAULTCLEAN_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_LOCALFAULTCLEAN_OFFS)

#define MV_XLG_MAC_PORT_STATUS_REMOTEFAULTCLEAN_OFFS		5
#define MV_XLG_MAC_PORT_STATUS_REMOTEFAULTCLEAN_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_REMOTEFAULTCLEAN_OFFS)

#define MV_XLG_MAC_PORT_STATUS_PORTRXPAUSE_OFFS		6
#define MV_XLG_MAC_PORT_STATUS_PORTRXPAUSE_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_PORTRXPAUSE_OFFS)

#define MV_XLG_MAC_PORT_STATUS_PORTTXPAUSE_OFFS		7
#define MV_XLG_MAC_PORT_STATUS_PORTTXPAUSE_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_PORTTXPAUSE_OFFS)

#define MV_XLG_MAC_PORT_STATUS_PFC_SYNC_FIFO_FULL_OFFS		8
#define MV_XLG_MAC_PORT_STATUS_PFC_SYNC_FIFO_FULL_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_STATUS_PFC_SYNC_FIFO_FULL_OFFS)


/* Port Fifos Thresholds Configuration */
#define MV_XLG_PORT_FIFOS_THRS_CFG_REG		(0x001)
#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_OFFS		0
#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_MASK    \
		(0x0000001f << MV_XLG_MAC_PORT_FIFOS_THRS_CFG_RXFULLTHR_OFFS)

#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXFIFOSIZE_OFFS		5
#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXFIFOSIZE_MASK    \
		(0x0000003f << MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXFIFOSIZE_OFFS)

#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXRDTHR_OFFS		11
#define MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXRDTHR_MASK    \
		(0x0000001f << MV_XLG_MAC_PORT_FIFOS_THRS_CFG_TXRDTHR_OFFS)


/* Port Mac Control3 */
#define MV_XLG_PORT_MAC_CTRL3_REG			(0x001c)
#define MV_XLG_MAC_CTRL3_BUFSIZE_OFFS		0
#define MV_XLG_MAC_CTRL3_BUFSIZE_MASK    \
		(0x0000003f << MV_XLG_MAC_CTRL3_BUFSIZE_OFFS)

#define MV_XLG_MAC_CTRL3_XTRAIPG_OFFS		6
#define MV_XLG_MAC_CTRL3_XTRAIPG_MASK    \
		(0x0000007f << MV_XLG_MAC_CTRL3_XTRAIPG_OFFS)

#define MV_XLG_MAC_CTRL3_MACMODESELECT_OFFS		13
#define MV_XLG_MAC_CTRL3_MACMODESELECT_MASK    \
		(0x00000007 << MV_XLG_MAC_CTRL3_MACMODESELECT_OFFS)


/* Port Per Prio Flow Control Status */
#define MV_XLG_PORT_PER_PRIO_FLOW_CTRL_STATUS_REG      (0x0020)
#define MV_XLG_MAC_PORT_PER_PRIO_FLOW_CTRL_STATUS_PRIONSTATUS_OFFS	0
#define MV_XLG_MAC_PORT_PER_PRIO_FLOW_CTRL_STATUS_PRIONSTATUS_MASK	\
		(0x00000001 <<						\
		MV_XLG_MAC_PORT_PER_PRIO_FLOW_CTRL_STATUS_PRIONSTATUS_OFFS)


/* Debug Bus Status */
#define MV_XLG_DEBUG_BUS_STATUS_REG		(0x0024)
#define MV_XLG_MAC_DEBUG_BUS_STATUS_DEBUG_BUS_OFFS		0
#define MV_XLG_MAC_DEBUG_BUS_STATUS_DEBUG_BUS_MASK    \
		(0x0000ffff << MV_XLG_MAC_DEBUG_BUS_STATUS_DEBUG_BUS_OFFS)


/* Port Metal Fix */
#define MV_XLG_PORT_METAL_FIX_REG		(0x002c)
#define MV_XLG_MAC_PORT_METAL_FIX_EN_EOP_IN_FIFO__OFFS		0
#define MV_XLG_MAC_PORT_METAL_FIX_EN_EOP_IN_FIFO__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_EOP_IN_FIFO__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_LTF_FIX__OFFS		1
#define MV_XLG_MAC_PORT_METAL_FIX_EN_LTF_FIX__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_LTF_FIX__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_HOLD_FIX__OFFS		2
#define MV_XLG_MAC_PORT_METAL_FIX_EN_HOLD_FIX__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_HOLD_FIX__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_LED_FIX__OFFS		3
#define MV_XLG_MAC_PORT_METAL_FIX_EN_LED_FIX__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_LED_FIX__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_PAD_PROTECT__OFFS		4
#define MV_XLG_MAC_PORT_METAL_FIX_EN_PAD_PROTECT__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_PAD_PROTECT__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS44__OFFS		5
#define MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS44__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS44__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS42__OFFS		6
#define MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS42__MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_NX_BTS42__OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_FLUSH_FIX_OFFS		7
#define MV_XLG_MAC_PORT_METAL_FIX_EN_FLUSH_FIX_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_FLUSH_FIX_OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_EN_PORT_EN_FIX_OFFS		8
#define MV_XLG_MAC_PORT_METAL_FIX_EN_PORT_EN_FIX_MASK    \
		(0x00000001 << MV_XLG_MAC_PORT_METAL_FIX_EN_PORT_EN_FIX_OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF0_BITS_OFFS		9
#define MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF0_BITS_MASK    \
		(0x0000000f << MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF0_BITS_OFFS)

#define MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF1_BITS_OFFS		13
#define MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF1_BITS_MASK    \
		(0x00000007 << MV_XLG_MAC_PORT_METAL_FIX_SPARE_DEF1_BITS_OFFS)

/* Xg Mib Counters Control */
#define MV_XLG_MIB_CNTRS_CTRL_REG		(0x0030)
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGCAPTURETRIGGER_OFFS		0
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGCAPTURETRIGGER_MASK	\
		(0x00000001 <<					\
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGCAPTURETRIGGER_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGDONTCLEARAFTERREAD_OFFS		1
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGDONTCLEARAFTERREAD_MASK  \
		(0x00000001 <<					\
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGDONTCLEARAFTERREAD_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGRXHISTOGRAMEN_OFFS		2
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGRXHISTOGRAMEN_MASK    \
		(0x00000001 <<				     \
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGRXHISTOGRAMEN_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGTXHISTOGRAMEN_OFFS		3
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGTXHISTOGRAMEN_MASK    \
		(0x00000001 <<				     \
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_XGTXHISTOGRAMEN_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__OFFS	4
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__MASK	\
		(0x00000001 <<						\
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MFA1_BTT940_FIX_ENABLE__OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_LEDS_NUMBER_OFFS		5
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_LEDS_NUMBER_MASK   \
		(0x0000003f <<				\
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_LEDS_NUMBER_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_OFFS		11
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_MASK	\
		(0x00000001 <<					\
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_COUNT_HIST_OFFS)

#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_OFFS		12
#define MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_MASK    \
		(0x00000001 <<					   \
		MV_XLG_MAC_XG_MIB_CNTRS_CTRL_MIB_4_LIMIT_1518_1522_OFFS)

/* Cn/ccfc Timer%i */
#define MV_XLG_CNCCFC_TIMERI_REG(t)		((0x0038 + t*4))
#define MV_XLG_MAC_CNCCFC_TIMERI_PORTSPEEDTIMER_OFFS	0
#define MV_XLG_MAC_CNCCFC_TIMERI_PORTSPEEDTIMER_MASK    \
		(0x0000ffff << MV_XLG_MAC_CNCCFC_TIMERI_PORTSPEEDTIMER_OFFS)

/* Ppfc Control */
#define MV_XLG_MAC_PPFC_CTRL_REG			(0x0060)
#define MV_XLG_MAC_PPFC_CTRL_GLOBAL_PAUSE_ENI_OFFS		0
#define MV_XLG_MAC_PPFC_CTRL_GLOBAL_PAUSE_ENI_MASK    \
		(0x00000001 << MV_XLG_MAC_PPFC_CTRL_GLOBAL_PAUSE_ENI_OFFS)

#define MV_XLG_MAC_PPFC_CTRL_DIP_BTS_677_EN_OFFS		9
#define MV_XLG_MAC_PPFC_CTRL_DIP_BTS_677_EN_MASK    \
		(0x00000001 << MV_XLG_MAC_PPFC_CTRL_DIP_BTS_677_EN_OFFS)

/* Fc Dsa Tag 0 */
#define MV_XLG_MAC_FC_DSA_TAG_0_REG		(0x0068)
#define MV_XLG_MAC_FC_DSA_TAG_0_DSATAGREG0_OFFS		0
#define MV_XLG_MAC_FC_DSA_TAG_0_DSATAGREG0_MASK    \
		(0x0000ffff << MV_XLG_MAC_FC_DSA_TAG_0_DSATAGREG0_OFFS)

/* Fc Dsa Tag 1 */
#define MV_XLG_MAC_FC_DSA_TAG_1_REG		(0x006c)
#define MV_XLG_MAC_FC_DSA_TAG_1_DSATAGREG1_OFFS		0
#define MV_XLG_MAC_FC_DSA_TAG_1_DSATAGREG1_MASK    \
		(0x0000ffff << MV_XLG_MAC_FC_DSA_TAG_1_DSATAGREG1_OFFS)

/* Fc Dsa Tag 2 */
#define MV_XLG_MAC_FC_DSA_TAG_2_REG		(0x0070)
#define MV_XLG_MAC_FC_DSA_TAG_2_DSATAGREG2_OFFS		0
#define MV_XLG_MAC_FC_DSA_TAG_2_DSATAGREG2_MASK    \
		(0x0000ffff << MV_XLG_MAC_FC_DSA_TAG_2_DSATAGREG2_OFFS)

/* Fc Dsa Tag 3 */
#define MV_XLG_MAC_FC_DSA_TAG_3_REG		(0x0074)
#define MV_XLG_MAC_FC_DSA_TAG_3_DSATAGREG3_OFFS		0
#define MV_XLG_MAC_FC_DSA_TAG_3_DSATAGREG3_MASK    \
		(0x0000ffff << MV_XLG_MAC_FC_DSA_TAG_3_DSATAGREG3_OFFS)

/* Dic Budget Compensation */
#define MV_XLG_MAC_DIC_BUDGET_COMPENSATION_REG	(0x0080)
#define MV_XLG_MAC_DIC_BUDGET_COMPENSATION_DIC_COUNTER_TO_ADD_8BYTES_OFFS    0
#define MV_XLG_MAC_DIC_BUDGET_COMPENSATION_DIC_COUNTER_TO_ADD_8BYTES_MASK    \
	(0x0000ffff <<							     \
	MV_XLG_MAC_DIC_BUDGET_COMPENSATION_DIC_COUNTER_TO_ADD_8BYTES_OFFS)

/* Port Mac Control4 */
#define MV_XLG_PORT_MAC_CTRL4_REG			(0x0084)
#define MV_XLG_MAC_CTRL4_LLFC_GLOBAL_FC_ENABLE_OFFS		0
#define MV_XLG_MAC_CTRL4_LLFC_GLOBAL_FC_ENABLE_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_LLFC_GLOBAL_FC_ENABLE_OFFS)

#define MV_XLG_MAC_CTRL4_LED_STREAM_SELECT_OFFS		1
#define MV_XLG_MAC_CTRL4_LED_STREAM_SELECT_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_LED_STREAM_SELECT_OFFS)

#define MV_XLG_MAC_CTRL4_DEBUG_BUS_SELECT_OFFS		2
#define MV_XLG_MAC_CTRL4_DEBUG_BUS_SELECT_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_DEBUG_BUS_SELECT_OFFS)

#define MV_XLG_MAC_CTRL4_MASK_PCS_RESET_OFFS		3
#define MV_XLG_MAC_CTRL4_MASK_PCS_RESET_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_MASK_PCS_RESET_OFFS)

#define MV_XLG_MAC_CTRL4_ENABLE_SHORT_PREAMBLE_FOR_XLG_OFFS		4
#define MV_XLG_MAC_CTRL4_ENABLE_SHORT_PREAMBLE_FOR_XLG_MASK    \
		(0x00000001 <<					\
		MV_XLG_MAC_CTRL4_ENABLE_SHORT_PREAMBLE_FOR_XLG_OFFS)

#define MV_XLG_MAC_CTRL4_FORWARD_802_3X_FC_EN_OFFS		5
#define MV_XLG_MAC_CTRL4_FORWARD_802_3X_FC_EN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_FORWARD_802_3X_FC_EN_OFFS)

#define MV_XLG_MAC_CTRL4_FORWARD_PFC_EN_OFFS		6
#define MV_XLG_MAC_CTRL4_FORWARD_PFC_EN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_FORWARD_PFC_EN_OFFS)

#define MV_XLG_MAC_CTRL4_FORWARD_UNKNOWN_FC_EN_OFFS		7
#define MV_XLG_MAC_CTRL4_FORWARD_UNKNOWN_FC_EN_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_FORWARD_UNKNOWN_FC_EN_OFFS)

#define MV_XLG_MAC_CTRL4_USE_XPCS_OFFS		8
#define MV_XLG_MAC_CTRL4_USE_XPCS_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_USE_XPCS_OFFS)

#define MV_XLG_MAC_CTRL4_DMA_INTERFACE_IS_64_BIT_OFFS		9
#define MV_XLG_MAC_CTRL4_DMA_INTERFACE_IS_64_BIT_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_DMA_INTERFACE_IS_64_BIT_OFFS)

#define MV_XLG_MAC_CTRL4_TX_DMA_INTERFACE_BITS_OFFS		10
#define MV_XLG_MAC_CTRL4_TX_DMA_INTERFACE_BITS_MASK    \
		(0x00000003 << MV_XLG_MAC_CTRL4_TX_DMA_INTERFACE_BITS_OFFS)

#define MV_XLG_MAC_CTRL4_MAC_MODE_DMA_1G_OFFS		12
#define MV_XLG_MAC_CTRL4_MAC_MODE_DMA_1G_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_MAC_MODE_DMA_1G_OFFS)
#define MV_XLG_MAC_CTRL4_EN_IDLE_CHECK_FOR_LINK_OFFS		14
#define MV_XLG_MAC_CTRL4_EN_IDLE_CHECK_FOR_LINK_MASK    \
		(0x00000001 << MV_XLG_MAC_CTRL4_EN_IDLE_CHECK_FOR_LINK_OFFS)

/* Port Mac Control5 */
#define MV_XLG_PORT_MAC_CTRL5_REG			(0x0088)
#define MV_XLG_MAC_CTRL5_TXIPGLENGTH_OFFS		0
#define MV_XLG_MAC_CTRL5_TXIPGLENGTH_MASK    \
		(0x0000000f << MV_XLG_MAC_CTRL5_TXIPGLENGTH_OFFS)

#define MV_XLG_MAC_CTRL5_PREAMBLELENGTHTX_OFFS		4
#define MV_XLG_MAC_CTRL5_PREAMBLELENGTHTX_MASK    \
		(0x00000007 << MV_XLG_MAC_CTRL5_PREAMBLELENGTHTX_OFFS)

#define MV_XLG_MAC_CTRL5_PREAMBLELENGTHRX_OFFS		7
#define MV_XLG_MAC_CTRL5_PREAMBLELENGTHRX_MASK    \
		(0x00000007 << MV_XLG_MAC_CTRL5_PREAMBLELENGTHRX_OFFS)

#define MV_XLG_MAC_CTRL5_TXNUMCRCBYTES_OFFS		10
#define MV_XLG_MAC_CTRL5_TXNUMCRCBYTES_MASK    \
		(0x00000007 << MV_XLG_MAC_CTRL5_TXNUMCRCBYTES_OFFS)

#define MV_XLG_MAC_CTRL5_RXNUMCRCBYTES_OFFS		13
#define MV_XLG_MAC_CTRL5_RXNUMCRCBYTES_MASK    \
		(0x00000007 << MV_XLG_MAC_CTRL5_RXNUMCRCBYTES_OFFS)


/* External Control */
#define MV_XLG_MAC_EXT_CTRL_REG			(0x0090)
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL0_OFFS		0
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL0_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL0_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL1_OFFS		1
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL1_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL1_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL2_OFFS		2
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL2_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL2_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL3_OFFS		3
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL3_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL3_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL4_OFFS		4
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL4_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL4_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL5_OFFS		5
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL5_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL5_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL6_OFFS		6
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL6_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL6_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL7_OFFS		7
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL7_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL7_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL8_OFFS		8
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL8_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL8_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL9_OFFS		9
#define MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL9_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXTERNAL_CTRL9_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_10_OFFS		10
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_10_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_10_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_11_OFFS		11
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_11_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_11_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_12_OFFS		12
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_12_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_12_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_13_OFFS		13
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_13_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_13_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_14_OFFS		14
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_14_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_14_OFFS)

#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_15_OFFS		15
#define MV_XLG_MAC_EXT_CTRL_EXT_CTRL_15_MASK    \
		(0x00000001 << MV_XLG_MAC_EXT_CTRL_EXT_CTRL_15_OFFS)


/* Macro Control */
#define MV_XLG_MAC_MACRO_CTRL_REG			(0x0094)
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_0_OFFS		0
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_0_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_0_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_1_OFFS		1
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_1_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_1_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_2_OFFS		2
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_2_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_2_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_3_OFFS		3
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_3_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_3_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_4_OFFS		4
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_4_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_4_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_5_OFFS		5
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_5_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_5_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_6_OFFS		6
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_6_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_6_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_7_OFFS		7
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_7_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_7_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_8_OFFS		8
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_8_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_8_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_9_OFFS		9
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_9_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_9_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_10_OFFS		10
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_10_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_10_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_11_OFFS		11
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_11_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_11_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_12_OFFS		12
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_12_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_12_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_13_OFFS		13
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_13_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_13_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_14_OFFS		14
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_14_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_14_OFFS)

#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_15_OFFS		15
#define MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_15_MASK    \
		(0x00000001 << MV_XLG_MAC_MACRO_CTRL_MACRO_CTRL_15_OFFS)

#define MV_XLG_MAC_DIC_PPM_IPG_REDUCE_REG		(0x0094)

/* Port Interrupt Cause */
#define MV_XLG_INTERRUPT_CAUSE_REG		(0x0014)
/* Port Interrupt Mask */
#define MV_XLG_INTERRUPT_MASK_REG			(0x0018)
#define MV_XLG_INTERRUPT_LINK_CHANGE_OFFS		1
#define MV_XLG_INTERRUPT_LINK_CHANGE_MASK	\
		(0x1 << MV_XLG_INTERRUPT_LINK_CHANGE_OFFS)

/* Port Interrupt Summary Cause */
#define MV_XLG_EXTERNAL_INTERRUPT_CAUSE_REG	(0x0058)
/* Port Interrupt Summary Mask */
#define MV_XLG_EXTERNAL_INTERRUPT_MASK_REG	(0x005C)
#define MV_XLG_EXTERNAL_INTERRUPT_LINK_CHANGE_OFFS	1
#define MV_XLG_EXTERNAL_INTERRUPT_LINK_CHANGE_MASK	\
		(0x1 << MV_XLG_EXTERNAL_INTERRUPT_LINK_CHANGE_OFFS)

/***********/
/*XPCS REGS */
/***********/


/* Global Configuration 0 */
#define MV_XPCS_GLOBAL_CFG_0_REG				(0x0)
#define MV_XPCS_GLOBAL_CFG_0_PCSRESET_OFFS		0
#define MV_XPCS_GLOBAL_CFG_0_PCSRESET_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_PCSRESET_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_DESKEWRESET_OFFS		1
#define MV_XPCS_GLOBAL_CFG_0_DESKEWRESET_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_DESKEWRESET_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_TXRESET_OFFS		2
#define MV_XPCS_GLOBAL_CFG_0_TXRESET_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_TXRESET_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_PCSMODE_OFFS		3
#define MV_XPCS_GLOBAL_CFG_0_PCSMODE_MASK    \
		(0x00000003 << MV_XPCS_GLOBAL_CFG_0_PCSMODE_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_LANEACTIVE_OFFS		5
#define MV_XPCS_GLOBAL_CFG_0_LANEACTIVE_MASK    \
		(0x00000003 << MV_XPCS_GLOBAL_CFG_0_LANEACTIVE_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_INDIVIDUALMODE_OFFS		7
#define MV_XPCS_GLOBAL_CFG_0_INDIVIDUALMODE_MASK    \
		(0x0000003f << MV_XPCS_GLOBAL_CFG_0_INDIVIDUALMODE_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_TXSMMODE_OFFS		13
#define MV_XPCS_GLOBAL_CFG_0_TXSMMODE_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_TXSMMODE_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_TXSMIDLECNTDISABLE_OFFS		14
#define MV_XPCS_GLOBAL_CFG_0_TXSMIDLECNTDISABLE_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_TXSMIDLECNTDISABLE_OFFS)

#define MV_XPCS_GLOBAL_CFG_0_COMMADETCT2NDSYNCSMEN_OFFS		15
#define MV_XPCS_GLOBAL_CFG_0_COMMADETCT2NDSYNCSMEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_0_COMMADETCT2NDSYNCSMEN_OFFS)


/* Global Configuration 1 */
#define MV_XPCS_GLOBAL_CFG_1_REG				(0x4)
#define MV_XPCS_GLOBAL_CFG_1_MACLOOPBACKEN_OFFS		0
#define MV_XPCS_GLOBAL_CFG_1_MACLOOPBACKEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_MACLOOPBACKEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_PCSLOOPBACKEN_OFFS		1
#define MV_XPCS_GLOBAL_CFG_1_PCSLOOPBACKEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_PCSLOOPBACKEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_REPEATERMODEEN_OFFS		2
#define MV_XPCS_GLOBAL_CFG_1_REPEATERMODEEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_REPEATERMODEEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_LOOPBACKCLKSEL_OFFS		3
#define MV_XPCS_GLOBAL_CFG_1_LOOPBACKCLKSEL_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_LOOPBACKCLKSEL_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_DESKEWCLKSEL_OFFS		4
#define MV_XPCS_GLOBAL_CFG_1_DESKEWCLKSEL_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_DESKEWCLKSEL_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_TXSMREPEATERMODE_OFFS		5
#define MV_XPCS_GLOBAL_CFG_1_TXSMREPEATERMODE_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_TXSMREPEATERMODE_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_RXLOCKBYPASSEN_OFFS		6
#define MV_XPCS_GLOBAL_CFG_1_RXLOCKBYPASSEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_RXLOCKBYPASSEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_TXLOCKBYPASSEN_OFFS		7
#define MV_XPCS_GLOBAL_CFG_1_TXLOCKBYPASSEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_TXLOCKBYPASSEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_REMOTEFAULTDIS_OFFS		8
#define MV_XPCS_GLOBAL_CFG_1_REMOTEFAULTDIS_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_REMOTEFAULTDIS_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_SIGNALDETDOWNLOCALFAULTGENDIS_OFFS		9
#define MV_XPCS_GLOBAL_CFG_1_SIGNALDETDOWNLOCALFAULTGENDIS_MASK		\
		(0x00000001 <<						\
		MV_XPCS_GLOBAL_CFG_1_SIGNALDETDOWNLOCALFAULTGENDIS_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_CJPATGENEN_OFFS		10
#define MV_XPCS_GLOBAL_CFG_1_CJPATGENEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_CJPATGENEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_CRPATGENEN_OFFS		11
#define MV_XPCS_GLOBAL_CFG_1_CRPATGENEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_CRPATGENEN_OFFS)

#define MV_XPCS_GLOBAL_CFG_1_CJRFORCEDISPEN_OFFS		12
#define MV_XPCS_GLOBAL_CFG_1_CJRFORCEDISPEN_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_CFG_1_CJRFORCEDISPEN_OFFS)


/* Global Fifo Threshold Configuration */
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_REG				(0x8)
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWTIMEOUTLIMIT_OFFS		0
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWTIMEOUTLIMIT_MASK    \
		(0x0000000f <<					\
		MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWTIMEOUTLIMIT_OFFS)

#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFOWRADDRFIX_OFFS		4
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFOWRADDRFIX_MASK    \
		(0x0000001f <<					\
		MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFOWRADDRFIX_OFFS)

#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFORDTH_OFFS		9
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFORDTH_MASK    \
		(0x0000000f << MV_XPCS_GLOBAL_FIFO_THR_CFG_DESKEWFIFORDTH_OFFS)

#define MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFORDTH_OFFS		13
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFORDTH_MASK    \
		(0x00000007 << MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFORDTH_OFFS)

#define MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFOEXTRAIDLECHKDIS_OFFS		16
#define MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFOEXTRAIDLECHKDIS_MASK    \
		(0x00000001 <<					    \
		MV_XPCS_GLOBAL_FIFO_THR_CFG_PPMFIFOEXTRAIDLECHKDIS_OFFS)


/* Global Max Idle Counter */
#define MV_XPCS_GLOBAL_MAX_IDLE_CNTR_REG			(0xc)
#define MV_XPCS_GLOBAL_MAX_IDLE_CNTR_MAXIDLECNT_OFFS		0
#define MV_XPCS_GLOBAL_MAX_IDLE_CNTR_MAXIDLECNT_MASK    \
		(0x0000ffff << MV_XPCS_GLOBAL_MAX_IDLE_CNTR_MAXIDLECNT_OFFS)


/* Global Status */
#define MV_XPCS_GLOBAL_STATUS_REG				(0x10)
#define MV_XPCS_GLOBAL_STATUS_LINKUP_OFFS		0
#define MV_XPCS_GLOBAL_STATUS_LINKUP_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_STATUS_LINKUP_OFFS)

#define MV_XPCS_GLOBAL_STATUS_DESKEWACQUIRED_OFFS		1
#define MV_XPCS_GLOBAL_STATUS_DESKEWACQUIRED_MASK    \
		(0x00000001 << MV_XPCS_GLOBAL_STATUS_DESKEWACQUIRED_OFFS)


/* Global Deskew Error Counter */
#define MV_XPCS_GLOBAL_DESKEW_ERR_CNTR_REG			(0x20)
#define MV_XPCS_GLOBAL_DESKEW_ERR_CNTR_DESKEWERRCNT_OFFS		0
#define MV_XPCS_GLOBAL_DESKEW_ERR_CNTR_DESKEWERRCNT_MASK    \
		(0x0000ffff << MV_XPCS_GLOBAL_DESKEW_ERR_CNTR_DESKEWERRCNT_OFFS)


/* Tx Packets Counter LSB */
#define MV_XPCS_TX_PCKTS_CNTR_LSB_REG				(0x30)
#define MV_XPCS_TX_PCKTS_CNTR_LSB_TXPCKTCNTRLSB_OFFS		0
#define MV_XPCS_TX_PCKTS_CNTR_LSB_TXPCKTCNTRLSB_MASK    \
		(0x0000ffff << MV_XPCS_TX_PCKTS_CNTR_LSB_TXPCKTCNTRLSB_OFFS)


/* Tx Packets Counter MSB */
#define MV_XPCS_TX_PCKTS_CNTR_MSB_REG				(0x34)
#define MV_XPCS_TX_PCKTS_CNTR_MSB_TXPCKTCNTRMSB_OFFS		0
#define MV_XPCS_TX_PCKTS_CNTR_MSB_TXPCKTCNTRMSB_MASK    \
		(0x0000ffff << MV_XPCS_TX_PCKTS_CNTR_MSB_TXPCKTCNTRMSB_OFFS)

/* XPCS per Lane registers */


/* Lane Configuration 0 */
#define MV_XPCS_LANE_CFG_0_REG				(0x50)
#define MV_XPCS_LANE_CFG_0_TXRESETIND_OFFS		0
#define MV_XPCS_LANE_CFG_0_TXRESETIND_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_TXRESETIND_OFFS)

#define MV_XPCS_LANE_CFG_0_RXRESETIND_OFFS		1
#define MV_XPCS_LANE_CFG_0_RXRESETIND_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_RXRESETIND_OFFS)

#define MV_XPCS_LANE_CFG_0_INDIVIDUALLOOPBACK_OFFS		2
#define MV_XPCS_LANE_CFG_0_INDIVIDUALLOOPBACK_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_INDIVIDUALLOOPBACK_OFFS)

#define MV_XPCS_LANE_CFG_0_INDIVIDUALLINELOOPBACK_OFFS		3
#define MV_XPCS_LANE_CFG_0_INDIVIDUALLINELOOPBACK_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_INDIVIDUALLINELOOPBACK_OFFS)

#define MV_XPCS_LANE_CFG_0_TXSMBYPASSEN_OFFS		4
#define MV_XPCS_LANE_CFG_0_TXSMBYPASSEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_TXSMBYPASSEN_OFFS)

#define MV_XPCS_LANE_CFG_0_RXIDLEGENBYPASSEN_OFFS		5
#define MV_XPCS_LANE_CFG_0_RXIDLEGENBYPASSEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_RXIDLEGENBYPASSEN_OFFS)

#define MV_XPCS_LANE_CFG_0_SIGNALDETECTBYPASSEN_OFFS		6
#define MV_XPCS_LANE_CFG_0_SIGNALDETECTBYPASSEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_SIGNALDETECTBYPASSEN_OFFS)

#define MV_XPCS_LANE_CFG_0_CJPATCHKEN_OFFS		7
#define MV_XPCS_LANE_CFG_0_CJPATCHKEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_CJPATCHKEN_OFFS)

#define MV_XPCS_LANE_CFG_0_CRPATCHKEN_OFFS		8
#define MV_XPCS_LANE_CFG_0_CRPATCHKEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_CRPATCHKEN_OFFS)

#define MV_XPCS_LANE_CFG_0_PRBSCHECKEN_OFFS		11
#define MV_XPCS_LANE_CFG_0_PRBSCHECKEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_PRBSCHECKEN_OFFS)

#define MV_XPCS_LANE_CFG_0_TESTGENEN_OFFS		12
#define MV_XPCS_LANE_CFG_0_TESTGENEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_TESTGENEN_OFFS)

#define MV_XPCS_LANE_CFG_0_TESTMODE_OFFS		13
#define MV_XPCS_LANE_CFG_0_TESTMODE_MASK    \
		(0x00000003 << MV_XPCS_LANE_CFG_0_TESTMODE_OFFS)

#define MV_XPCS_LANE_CFG_0_TESTMODEEN_OFFS		15
#define MV_XPCS_LANE_CFG_0_TESTMODEEN_MASK    \
		(0x00000001 << MV_XPCS_LANE_CFG_0_TESTMODEEN_OFFS)


/* Lane Configuration 1 */
#define MV_XPCS_LANE_CFG_1_REG				(0x54)
#define MV_XPCS_LANE_CFG_1_LED0CTRL_OFFS		0
#define MV_XPCS_LANE_CFG_1_LED0CTRL_MASK    \
		(0x0000000f << MV_XPCS_LANE_CFG_1_LED0CTRL_OFFS)

#define MV_XPCS_LANE_CFG_1_LED1CTRL_OFFS		4
#define MV_XPCS_LANE_CFG_1_LED1CTRL_MASK    \
		(0x0000000f << MV_XPCS_LANE_CFG_1_LED1CTRL_OFFS)

#define MV_XPCS_LANE_CFG_1_TXSWPSEL_OFFS		8
#define MV_XPCS_LANE_CFG_1_TXSWPSEL_MASK    \
		(0x00000007 << MV_XPCS_LANE_CFG_1_TXSWPSEL_OFFS)

#define MV_XPCS_LANE_CFG_1_RXSWPSEL_OFFS		11
#define MV_XPCS_LANE_CFG_1_RXSWPSEL_MASK    \
		(0x00000007 << MV_XPCS_LANE_CFG_1_RXSWPSEL_OFFS)


/* Lane Status */
#define MV_XPCS_LANE_STATUS_REG				(0x5c)
#define MV_XPCS_LANE_STATUS_PRBSCHECKLOCKED_OFFS		0
#define MV_XPCS_LANE_STATUS_PRBSCHECKLOCKED_MASK    \
		(0x00000001 << MV_XPCS_LANE_STATUS_PRBSCHECKLOCKED_OFFS)

#define MV_XPCS_LANE_STATUS_PLLLOCKED_OFFS		1
#define MV_XPCS_LANE_STATUS_PLLLOCKED_MASK    \
		(0x00000001 << MV_XPCS_LANE_STATUS_PLLLOCKED_OFFS)

#define MV_XPCS_LANE_STATUS_SIGNALDETECTED_OFFS		2
#define MV_XPCS_LANE_STATUS_SIGNALDETECTED_MASK    \
		(0x00000001 << MV_XPCS_LANE_STATUS_SIGNALDETECTED_OFFS)

#define MV_XPCS_LANE_STATUS_COMMADETECTED_OFFS		3
#define MV_XPCS_LANE_STATUS_COMMADETECTED_MASK    \
		(0x00000001 << MV_XPCS_LANE_STATUS_COMMADETECTED_OFFS)

#define MV_XPCS_LANE_STATUS_SYNCOK_OFFS		4
#define MV_XPCS_LANE_STATUS_SYNCOK_MASK    \
		(0x00000001 << MV_XPCS_LANE_STATUS_SYNCOK_OFFS)


/* Symbol Error Counter */
#define MV_XPCS_SYMBOL_ERR_CNTR_REG			(0x68)
#define MV_XPCS_SYMBOL_ERR_CNTR_SYMBOLERRCNT_OFFS	0
#define MV_XPCS_SYMBOL_ERR_CNTR_SYMBOLERRCNT_MASK    \
		(0x0000ffff << MV_XPCS_SYMBOL_ERR_CNTR_SYMBOLERRCNT_OFFS)


/* Disparity Error Counter */
#define MV_XPCS_DISPARITY_ERR_CNTR_REG			(0x6c)
#define MV_XPCS_DISPARITY_ERR_CNTR_DISPARITYERRCNT_OFFS		0
#define MV_XPCS_DISPARITY_ERR_CNTR_DISPARITYERRCNT_MASK    \
		(0x0000ffff << MV_XPCS_DISPARITY_ERR_CNTR_DISPARITYERRCNT_OFFS)


/* Prbs Error Counter */
#define MV_XPCS_PRBS_ERR_CNTR_REG			(0x70)
#define MV_XPCS_PRBS_ERR_CNTR_PRBSERRCNT_OFFS		0
#define MV_XPCS_PRBS_ERR_CNTR_PRBSERRCNT_MASK    \
		(0x0000ffff << MV_XPCS_PRBS_ERR_CNTR_PRBSERRCNT_OFFS)


/* Rx Packets Counter LSB */
#define MV_XPCS_RX_PCKTS_CNTR_LSB_REG			(0x74)
#define MV_XPCS_RX_PCKTS_CNTR_LSB_RXPCKTCNTRLSB_OFFS		0
#define MV_XPCS_RX_PCKTS_CNTR_LSB_RXPCKTCNTRLSB_MASK    \
		(0x0000ffff << MV_XPCS_RX_PCKTS_CNTR_LSB_RXPCKTCNTRLSB_OFFS)


/* Rx Packets Counter MSB */
#define MV_XPCS_RX_PCKTS_CNTR_MSB_REG			(0x78)
#define MV_XPCS_RX_PCKTS_CNTR_MSB_RXPCKTCNTRMSB_OFFS	0
#define MV_XPCS_RX_PCKTS_CNTR_MSB_RXPCKTCNTRMSB_MASK    \
		(0x0000ffff << MV_XPCS_RX_PCKTS_CNTR_MSB_RXPCKTCNTRMSB_OFFS)


/* Rx Bad Packets Counter LSB */
#define MV_XPCS_RX_BAD_PCKTS_CNTR_LSB_REG			(0x7c)
#define MV_XPCS_RX_BAD_PCKTS_CNTR_LSB_RXBADPCKTCNTRLSB_OFFS		0
#define MV_XPCS_RX_BAD_PCKTS_CNTR_LSB_RXBADPCKTCNTRLSB_MASK    \
		(0x0000ffff <<					\
		MV_XPCS_RX_BAD_PCKTS_CNTR_LSB_RXBADPCKTCNTRLSB_OFFS)


/* Rx Bad Packets Counter MSB */
#define MV_XPCS_RX_BAD_PCKTS_CNTR_MSB_REG			(0x80)
#define MV_XPCS_RX_BAD_PCKTS_CNTR_MSB_RXBADPCKTCNTRMSB_OFFS		0
#define MV_XPCS_RX_BAD_PCKTS_CNTR_MSB_RXBADPCKTCNTRMSB_MASK    \
		(0x0000ffff <<					\
		MV_XPCS_RX_BAD_PCKTS_CNTR_MSB_RXBADPCKTCNTRMSB_OFFS)


/* Cyclic Data 0 */
#define MV_XPCS_CYCLIC_DATA_0_REG				(0x84)
#define MV_XPCS_CYCLIC_DATA_0_CYCLICDATA0_OFFS		0
#define MV_XPCS_CYCLIC_DATA_0_CYCLICDATA0_MASK    \
		(0x000003ff << MV_XPCS_CYCLIC_DATA_0_CYCLICDATA0_OFFS)


/* Cyclic Data 1 */
#define MV_XPCS_CYCLIC_DATA_1_REG				(0x88)
#define MV_XPCS_CYCLIC_DATA_1_CYCLICDATA1_OFFS		0
#define MV_XPCS_CYCLIC_DATA_1_CYCLICDATA1_MASK    \
		(0x000003ff << MV_XPCS_CYCLIC_DATA_1_CYCLICDATA1_OFFS)


/* Cyclic Data 2 */
#define MV_XPCS_CYCLIC_DATA_2_REG				(0x8c)
#define MV_XPCS_CYCLIC_DATA_2_CYCLICDATA2_OFFS		0
#define MV_XPCS_CYCLIC_DATA_2_CYCLICDATA2_MASK    \
		(0x000003ff << MV_XPCS_CYCLIC_DATA_2_CYCLICDATA2_OFFS)


/* Cyclic Data 3 */
#define MV_XPCS_CYCLIC_DATA_3_REG				(0x90)
#define MV_XPCS_CYCLIC_DATA_3_CYCLICDATA3_OFFS		0
#define MV_XPCS_CYCLIC_DATA_3_CYCLICDATA3_MASK    \
		(0x000003ff << MV_XPCS_CYCLIC_DATA_3_CYCLICDATA3_OFFS)


/*************/
/*SERDES REGS  */
/*************/

#define MV_SERDES_CFG_0_REG			(0x00)

#define MV_SERDES_CFG_0_PU_PLL_OFFS		1
#define MV_SERDES_CFG_0_PU_PLL_MASK	\
			(0x00000001 << MV_SERDES_CFG_0_PU_PLL_OFFS)
#define MV_SERDES_CFG_0_RX_PLL_OFFS		11
#define MV_SERDES_CFG_0_RX_PLL_MASK	\
			(0x00000001 << MV_SERDES_CFG_0_RX_PLL_OFFS)
#define MV_SERDES_CFG_0_TX_PLL_OFFS		12
#define MV_SERDES_CFG_0_TX_PLL_MASK	\
			(0x00000001 << MV_SERDES_CFG_0_TX_PLL_OFFS)
#define MV_SERDES_CFG_0_MEDIA_MODE_OFFS		15
#define MV_SERDES_CFG_0_MEDIA_MODE_MASK  \
			(0x00000001 << MV_SERDES_CFG_0_MEDIA_MODE_OFFS)

#define MV_SERDES_CFG_1_REG			(0x04)
#define MV_SERDES_CFG_1_ANALOG_RESET_OFFS	3
#define MV_SERDES_CFG_1_ANALOG_RESET_MASK    \
		(0x00000001 << MV_SERDES_CFG_1_ANALOG_RESET_OFFS)

#define MV_SERDES_CFG_1_CORE_RESET_OFFS		5
#define MV_SERDES_CFG_1_CORE_RESET_MASK    \
		(0x00000001 << MV_SERDES_CFG_1_CORE_RESET_OFFS)

#define MV_SERDES_CFG_1_DIGITAL_RESET_OFFS	6
#define MV_SERDES_CFG_1_DIGITAL_RESET_MASK    \
		(0x00000001 << MV_SERDES_CFG_1_DIGITAL_RESET_OFFS)

#define MV_SERDES_CFG_1_TX_SYNC_EN_OFFS		7
#define MV_SERDES_CFG_1_TX_SYNC_EN_MASK    \
		(0x00000001 << MV_SERDES_CFG_1_TX_SYNC_EN_OFFS)

#define MV_SERDES_CFG_2_REG			(0x08)
#define MV_SERDES_CFG_3_REG			(0x0c)
#define MV_SERDES_MISC_REG			(0x14)

/*************/
/*SMI  REGS      */
/*************/

/* SMI_MISC_CFG Register */
#define MV_SMI_MANAGEMENT_REG						(0x0)

#define MV_SMI_MANAGEMENT_BUSY_OFFS					28
#define MV_SMI_MANAGEMENT_BUSY_MASK					\
	(0x1 << MV_SMI_MANAGEMENT_BUSY_OFFS)
#define MV_SMI_MANAGEMENT_READ_VALID_OFFS				27
#define MV_SMI_MANAGEMENT_READ_VALID_MASK				\
	(0x1 << MV_SMI_MANAGEMENT_READ_VALID_OFFS)
#define MV_SMI_MANAGEMENT_OPCODE_OFFS					26
#define MV_SMI_OPCODE_READ		(1 << MV_SMI_MANAGEMENT_OPCODE_OFFS)
#define MV_SMI_MANAGEMENT_OPCODE_MASK					\
	(0x1 << MV_SMI_MANAGEMENT_OPCODE_OFFS)
#define MV_SMI_MANAGEMENT_REGAD_OFFS					21
#define MV_SMI_MANAGEMENT_REGAD_MASK					\
	(0x1F << MV_SMI_MANAGEMENT_REGAD_OFFS)
#define MV_SMI_MANAGEMENT_PHYAD_OFFS					16
#define MV_SMI_MANAGEMENT_PHYAD_MASK					\
	(0x1F << MV_SMI_MANAGEMENT_PHYAD_OFFS)
#define MV_SMI_MANAGEMENT_DATA_OFFS					0
#define MV_SMI_MANAGEMENT_DATA_MASK					\
	(0xFFFF << MV_SMI_MANAGEMENT_DATA_OFFS)

/* SMI_MISC_CFG Register */
#define MV_SMI_MISC_CFG_REG						(0x4)

#define MV_SMI_MISC_CFG_SMI_ACCELERATE_OFFS				0
#define MV_SMI_MISC_CFG_SMI_ACCELERATE_MASK				\
	(0x1 << MV_SMI_MISC_CFG_SMI_ACCELERATE_OFFS)
#define MV_SMI_MISC_CFG_SMI_FASTMDC_OFFS				1
#define MV_SMI_MISC_CFG_SMI_FASTMDC_MASK				\
	(0x1 << MV_SMI_MISC_CFG_SMI_FASTMDC_OFFS)
#define MV_SMI_MISC_CFG_FAST_MDC_DIVISION_SELECTOR_OFFS			2
#define MV_SMI_MISC_CFG_FAST_MDC_DIVISION_SELECTOR_MASK			\
	(0x3 << MV_SMI_MISC_CFG_FAST_MDC_DIVISION_SELECTOR_OFFS)
#define MV_SMI_MISC_CFG_ENABLE_MDIO_OUT_LATENCY_OFFS			4
#define MV_SMI_MISC_CFG_ENABLE_MDIO_OUT_LATENCY_MASK			\
	(0x1 << MV_SMI_MISC_CFG_ENABLE_MDIO_OUT_LATENCY_OFFS)
#define MV_SMI_MISC_CFG_AUTOPOLLNUMOFPORTS_OFFS				5
#define MV_SMI_MISC_CFG_AUTOPOLLNUMOFPORTS_MASK				\
	(0x1F << MV_SMI_MISC_CFG_AUTOPOLLNUMOFPORTS_OFFS)
#define MV_SMI_MISC_CFG_ENABLE_POLLING_OFFS				10
#define MV_SMI_MISC_CFG_ENABLE_POLLING_MASK				\
	(0x1 << MV_SMI_MISC_CFG_ENABLE_POLLING_OFFS)
#define MV_SMI_MISC_CFG_INVERT_MDC_OFFS					11
#define MV_SMI_MISC_CFG_INVERT_MDC_MASK					\
	(0x1 << MV_SMI_MISC_CFG_INVERT_MDC_OFFS)

/* PHY_AN_CFG Register */
#define MV_SMI_PHY_AN_CFG_REG						(0x8)

#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT0_OFFS			0
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT0_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT0_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT1_OFFS			1
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT1_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT1_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT2_OFFS			2
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT2_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT2_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT3_OFFS			3
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT3_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT3_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT4_OFFS			4
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT4_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT4_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT5_OFFS			5
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT5_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT5_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT6_OFFS			6
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT6_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT6_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT7_OFFS			7
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT7_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT7_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT8_OFFS			8
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT8_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT8_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT9_OFFS			9
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT9_MASK			\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT9_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT10_OFFS		10
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT10_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT10_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT11_OFFS		11
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT11_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT11_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT12_OFFS		12
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT12_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT12_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT13_OFFS		13
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT13_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT13_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT14_OFFS		14
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT14_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT14_OFFS)
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT15_OFFS		15
#define MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT15_MASK		\
	(0x1 << MV_SMI_PHY_AN_CFG_AUTOMEDIA_SELECTEN_PORT15_OFFS)
#define MV_SMI_PHY_AN_CFG_SKIPSWRESET_SMI_OFFS				16
#define MV_SMI_PHY_AN_CFG_SKIPSWRESET_SMI_MASK				\
	(0x1 << MV_SMI_PHY_AN_CFG_SKIPSWRESET_SMI_OFFS)
#define MV_SMI_PHY_AN_CFG_STOP_AUTONEGSMI_OFFS				17
#define MV_SMI_PHY_AN_CFG_STOP_AUTONEGSMI_MASK				\
	(0x1 << MV_SMI_PHY_AN_CFG_STOP_AUTONEGSMI_OFFS)
#define MV_SMI_PHY_AN_CFG_MASTERSMI_OFFS				18
#define MV_SMI_PHY_AN_CFG_MASTERSMI_MASK				\
	(0x1 << MV_SMI_PHY_AN_CFG_MASTERSMI_OFFS)
#define MV_SMI_PHY_AN_CFG_SGMIIINBANDFCEN_OFFS				19
#define MV_SMI_PHY_AN_CFG_SGMIIINBANDFCEN_MASK				\
	(0x1 << MV_SMI_PHY_AN_CFG_SGMIIINBANDFCEN_OFFS)
#define MV_SMI_PHY_AN_CFG_FCADVSETFIBER_OFFS				20
#define MV_SMI_PHY_AN_CFG_FCADVSETFIBER_MASK				\
	(0x1 << MV_SMI_PHY_AN_CFG_FCADVSETFIBER_OFFS)

/* PHY_ADDRESS_REGISTER0 Register */
#define MV_SMI_PHY_ADDRESS_REG(n)				(0xC + 0x4*n)
#define MV_SMI_PHY_ADDRESS_PHYAD_OFFS					0
#define MV_SMI_PHY_ADDRESS_PHYAD_MASK					\
	(0x1F << MV_SMI_PHY_ADDRESS_PHYAD_OFFS)

/* Gop Register End */


/* Packet Processor V2 registers */

/*All PPV22 Addresses are 40-bit */
#define MVPP22_ADDR_HIGH_SIZE			8
#define MVPP22_ADDR_HIGH_MASK			((1<<MVPP22_ADDR_HIGH_SIZE) - 1)
#define MVPP22_ADDR_MASK			(0xFFFFFFFFFF)
/* Desc addr shift */
#define MVPP21_DESC_ADDR_SHIFT			0 /*Applies to RXQ, AGGR_TXQ*/
#define MVPP22_DESC_ADDR_SHIFT			(9-1) /*Applies to RXQ, AGGR_TXQ*/

/* RX Fifo Registers */
#define MVPP2_RX_DATA_FIFO_SIZE_REG(port)	(0x00 + 4 * (port))
#define MVPP2_RX_ATTR_FIFO_SIZE_REG(port)	(0x20 + 4 * (port))
#define MVPP2_RX_MIN_PKT_SIZE_REG		0x60
#define MVPP2_RX_FIFO_INIT_REG			0x64

/* RX DMA Top Registers */
#define MVPP2_RX_CTRL_REG(port)			(0x140 + 4 * (port))
#define MVPP2_RX_LOW_LATENCY_PKT_SIZE(s)	(((s) & 0xfff) << 16)
#define MVPP2_RX_USE_PSEUDO_FOR_CSUM_MASK	BIT(31)
#define MVPP2_POOL_BUF_SIZE_REG(pool)		(0x180 + 4 * (pool))
#define MVPP2_POOL_BUF_SIZE_OFFSET		5
#define MVPP2_RXQ_CONFIG_REG(rxq)		(0x800 + 4 * (rxq))
#define MVPP2_SNOOP_PKT_SIZE_MASK		0x1ff
#define MVPP2_SNOOP_BUF_HDR_MASK		BIT(9)
#define MVPP2_RXQ_POOL_SHORT_OFFS		20
#define MVPP2_RXQ_POOL_SHORT_MASK		0x700000
#define MVPP2_RXQ_POOL_LONG_OFFS		24
#define MVPP2_RXQ_POOL_LONG_MASK		0x7000000
#define MVPP2_RXQ_PACKET_OFFSET_OFFS		28
#define MVPP2_RXQ_PACKET_OFFSET_MASK		0x70000000
#define MVPP2_RXQ_DISABLE_MASK			BIT(31)

/* AXI Bridge Registers */
#define MVPP22_AXI_BM_WR_ATTR_REG		0x4100
#define MVPP22_AXI_BM_RD_ATTR_REG		0x4104
#define MVPP22_AXI_AGGRQ_DESCR_RD_ATTR_REG	0x4110
#define MVPP22_AXI_TXQ_DESCR_WR_ATTR_REG	0x4114
#define MVPP22_AXI_TXQ_DESCR_RD_ATTR_REG	0x4118
#define MVPP22_AXI_RXQ_DESCR_WR_ATTR_REG	0x411c
#define MVPP22_AXI_RX_DATA_WR_ATTR_REG		0x4120
#define MVPP22_AXI_TX_DATA_RD_ATTR_REG		0x4130
#define MVPP22_AXI_RD_NORMAL_CODE_REG		0x4150
#define MVPP22_AXI_RD_SNP_CODE_REG		0x4154
#define MVPP22_AXI_WR_NORMAL_CODE_REG		0x4160
#define MVPP22_AXI_WR_SNP_CODE_REG		0x4164

#define MVPP22_AXI_RD_CODE_MASK			0x33
#define MVPP22_AXI_WR_CODE_MASK			0x33

#define MVPP22_AXI_ATTR_CACHE_OFFS		0
#define MVPP22_AXI_ATTR_CACHE_SIZE		4
#define MVPP22_AXI_ATTR_CACHE_MASK		0x0000000F

#define MVPP22_AXI_ATTR_QOS_OFFS		4
#define MVPP22_AXI_ATTR_QOS_SIZE		4
#define MVPP22_AXI_ATTR_QOS_MASK		0x000000F0

#define MVPP22_AXI_ATTR_TC_OFFS			8
#define MVPP22_AXI_ATTR_TC_SIZE			4
#define MVPP22_AXI_ATTR_TC_MASK			0x00000F00

#define MVPP22_AXI_ATTR_DOMAIN_OFFS		12
#define MVPP22_AXI_ATTR_DOMAIN_SIZE		2
#define MVPP22_AXI_ATTR_DOMAIN_MASK		0x00003000

#define MVPP22_AXI_ATTR_SNOOP_CNTRL_BIT		BIT(16)

/* Parser Registers */
#define MVPP2_PRS_INIT_LOOKUP_REG		0x1000
#define MVPP2_PRS_PORT_LU_MAX			0xf
#define MVPP2_PRS_PORT_LU_MASK(port)		(0xff << ((port) * 4))
#define MVPP2_PRS_PORT_LU_VAL(port, val)	((val) << ((port) * 4))
#define MVPP2_PRS_INIT_OFFS_REG(port)		(0x1004 + ((port) & 4))
#define MVPP2_PRS_INIT_OFF_MASK(port)		(0x3f << (((port) % 4) * 8))
#define MVPP2_PRS_INIT_OFF_VAL(port, val)	((val) << (((port) % 4) * 8))
#define MVPP2_PRS_MAX_LOOP_REG(port)		(0x100c + ((port) & 4))
#define MVPP2_PRS_MAX_LOOP_MASK(port)		(0xff << (((port) % 4) * 8))
#define MVPP2_PRS_MAX_LOOP_VAL(port, val)	((val) << (((port) % 4) * 8))
#define MVPP2_PRS_TCAM_IDX_REG			0x1100
#define MVPP2_PRS_TCAM_DATA_REG(idx)		(0x1104 + (idx) * 4)
#define MVPP2_PRS_TCAM_INV_MASK			BIT(31)
#define MVPP2_PRS_SRAM_IDX_REG			0x1200
#define MVPP2_PRS_SRAM_DATA_REG(idx)		(0x1204 + (idx) * 4)
#define MVPP2_PRS_TCAM_CTRL_REG			0x1230
#define MVPP2_PRS_TCAM_EN_MASK			BIT(0)

/* Classifier Registers */
#define MVPP2_CLS_MODE_REG			0x1800
#define MVPP2_CLS_MODE_ACTIVE_MASK		BIT(0)
#define MVPP2_CLS_PORT_WAY_REG			0x1810
#define MVPP2_CLS_PORT_WAY_MASK(port)		(1 << (port))
#define MVPP2_CLS_LKP_INDEX_REG			0x1814
#define MVPP2_CLS_LKP_INDEX_WAY_OFFS		6
#define MVPP2_CLS_LKP_TBL_REG			0x1818
#define MVPP2_CLS_LKP_TBL_RXQ_MASK		0xff
#define MVPP2_CLS_LKP_TBL_LOOKUP_EN_MASK	BIT(25)
#define MVPP2_CLS_FLOW_INDEX_REG		0x1820
#define MVPP2_CLS_FLOW_TBL0_REG			0x1824
#define MVPP2_CLS_FLOW_TBL1_REG			0x1828
#define MVPP2_CLS_FLOW_TBL2_REG			0x182c
#define MVPP2_CLS_OVERSIZE_RXQ_LOW_REG(port)	(0x1980 + ((port) * 4))
#define MVPP2_CLS_OVERSIZE_RXQ_LOW_BITS		3
#define MVPP2_CLS_OVERSIZE_RXQ_LOW_MASK		0x7
#define MVPP2_CLS_SWFWD_P2HQ_REG(port)		(0x19b0 + ((port) * 4))
#define MVPP2_CLS_SWFWD_PCTRL_REG		0x19d0
#define MVPP2_CLS_SWFWD_PCTRL_MASK(port)	(1 << (port))

/* Descriptor Manager Top Registers */
#define MVPP2_RXQ_NUM_REG			0x2040
#define MVPP2_RXQ_DESC_ADDR_REG			0x2044
#define MVPP2_RXQ_DESC_SIZE_REG			0x2048
#define MVPP2_RXQ_DESC_SIZE_MASK		0x3ff0
#define MVPP2_RXQ_STATUS_UPDATE_REG(rxq)	(0x3000 + 4 * (rxq))
#define MVPP2_RXQ_NUM_PROCESSED_OFFSET		0
#define MVPP2_RXQ_NUM_NEW_OFFSET		16
#define MVPP2_RXQ_STATUS_REG(rxq)		(0x3400 + 4 * (rxq))
#define MVPP2_RXQ_OCCUPIED_MASK			0x3fff
#define MVPP2_RXQ_NON_OCCUPIED_OFFSET		16
#define MVPP2_RXQ_NON_OCCUPIED_MASK		0x3fff0000
#define MVPP2_RXQ_THRESH_REG			0x204c
#define MVPP2_OCCUPIED_THRESH_OFFSET		0
#define MVPP2_OCCUPIED_THRESH_MASK		0x3fff
#define MVPP2_RXQ_INDEX_REG			0x2050
#define MVPP2_TXQ_NUM_REG			0x2080
#define MVPP2_TXQ_DESC_ADDR_LOW_REG		0x2084
#define MVPP2_TXQ_DESC_ADDR_LOW_SHIFT		0
#define MVPP2_TXQ_DESC_ADDR_LOW_MASK		0xfffffe00
#define MVPP22_TXQ_DESC_ADDR_HIGH_REG		0x20a8
#define MVPP22_TXQ_DESC_ADDR_HIGH_MASK		0xff
#define MVPP2_TXQ_DESC_SIZE_REG			0x2088
#define MVPP2_TXQ_DESC_SIZE_MASK		0x3ff0
#define MVPP2_TXQ_DESC_HWF_SIZE_REG		0x208c
#define MVPP2_TXQ_DESC_HWF_SIZE_OFFSET		4
#define MVPP2_TXQ_DESC_HWF_SIZE_MASK	\
				(0x3FF << MVPP2_TXQ_DESC_HWF_SIZE_OFFSET)
#define MVPP2_AGGR_TXQ_UPDATE_REG		0x2090
#define MVPP2_TXQ_THRESH_REG			0x2094
#define MVPP2_TRANSMITTED_THRESH_OFFSET		16
#define MVPP2_TRANSMITTED_THRESH_MASK		0x3fff0000
#define MVPP2_TXQ_INDEX_REG			0x2098
#define MVPP2_TXQ_PREF_BUF_REG			0x209c
#define MVPP2_PREF_BUF_PTR(desc)		((desc) & 0xfff)
#define MVPP2_PREF_BUF_SIZE_4			(BIT(12) | BIT(13))
#define MVPP2_PREF_BUF_SIZE_16			(BIT(12) | BIT(14))
#define MVPP2_PREF_BUF_THRESH(val)		((val) << 17)
#define MVPP2_TXQ_DRAIN_EN_MASK			BIT(31)
#define MVPP2_TXQ_PENDING_REG			0x20a0
#define MVPP2_TXQ_PENDING_MASK			0x3fff
#define MVPP2_TXQ_INT_STATUS_REG		0x20a4
#define MVPP2_TXQ_RSVD_REQ_REG			0x20b0
#define MVPP2_TXQ_RSVD_REQ_Q_OFFSET		16
#define MVPP2_TXQ_RSVD_RSLT_REG			0x20b4
#define MVPP2_TXQ_RSVD_RSLT_MASK		0x3fff
#define MVPP2_TXQ_RSVD_CLR_REG			0x20b8
#define MVPP2_TXQ_RSVD_CLR_OFFSET		16
#define MVPP2_AGGR_TXQ_DESC_ADDR_REG(cpu)	(0x2100 + 4 * (cpu))
#define MVPP2_AGGR_TXQ_DESC_SIZE_REG(cpu)	(0x2140 + 4 * (cpu))
#define MVPP2_AGGR_TXQ_DESC_SIZE_MASK		0x3ff0
#define MVPP2_AGGR_TXQ_STATUS_REG(cpu)		(0x2180 + 4 * (cpu))
#define MVPP2_AGGR_TXQ_PENDING_MASK		0x3fff
#define MVPP2_AGGR_TXQ_INDEX_REG(cpu)		(0x21c0 + 4 * (cpu))
#define MVPP21_TXQ_SENT_REG(txq)		(0x3c00 + 4 * (txq))
#define MVPP21_TRANSMITTED_COUNT_OFFSET		16
#define MVPP21_TRANSMITTED_COUNT_MASK		0x3fff0000
#define MVPP22_TXQ_SENT_REG(txq)		(0x3e00 + 4 * (txq-128))
#define MVPP22_TRANSMITTED_COUNT_OFFSET		16
#define MVPP22_TRANSMITTED_COUNT_MASK		0x3fff0000

/* MBUS bridge registers */
#define MVPP2_WIN_BASE(w)			(0x4000 + ((w) << 2))
#define MVPP2_WIN_SIZE(w)			(0x4020 + ((w) << 2))
#define MVPP2_WIN_REMAP(w)			(0x4040 + ((w) << 2))
#define MVPP2_BASE_ADDR_ENABLE			0x4060

/* Interrupt Cause and Mask registers */
#define MVPP22_ISR_TX_THRESHOLD_REG(port)	(0x5140 + 4 * (port))
#define MVPP2_ISR_RX_THRESHOLD_REG(rxq)		(0x5200 + 4 * (rxq))
#define MVPP21_ISR_RXQ_GROUP_REG(port)		(0x5400 + 4 * (port))
#define MVPP22_ISR_RXQ_GROUP_INDEX_REG		0x5400
#define MVPP22_ISR_RXQ_GROUP_INDEX_SUBGROUP_MASK 0xf
#define MVPP22_ISR_RXQ_GROUP_INDEX_GROUP_MASK   0x380
#define MVPP22_ISR_RXQ_GROUP_INDEX_GROUP_OFFSET 7


#define MVPP22_ISR_RXQ_GROUP_INDEX_SUBGROUP_MASK 0xf
#define MVPP22_ISR_RXQ_GROUP_INDEX_GROUP_MASK   0x380

#define MVPP22_ISR_RXQ_SUB_GROUP_CONFIG_REG	0x5404
#define MVPP22_ISR_RXQ_SUB_GROUP_STARTQ_MASK	0x1f
#define MVPP22_ISR_RXQ_SUB_GROUP_SIZE_MASK	0xf00
#define MVPP22_ISR_RXQ_SUB_GROUP_SIZE_OFFSET	8

/* Buffer Manager registers */
#define MVPP2_BM_POOL_BASE_REG(pool)		(0x6000 + ((pool) * 4))
#define     MVPP2_BM_POOL_BASE_ADDR_MASK	0xfffff80
#define MVPP2_BM_POOL_SIZE_REG(pool)		(0x6040 + ((pool) * 4))
#define     MVPP2_BM_POOL_SIZE_MASK		0xfff0
#define MVPP2_BM_POOL_READ_PTR_REG(pool)	(0x6080 + ((pool) * 4))
#define     MVPP2_BM_POOL_GET_READ_PTR_MASK	0xfff0
#define MVPP2_BM_POOL_PTRS_NUM_REG(pool)	(0x60c0 + ((pool) * 4))
#define     MVPP2_BM_POOL_PTRS_NUM_MASK		0xfff0
#define MVPP2_BM_BPPI_READ_PTR_REG(pool)	(0x6100 + ((pool) * 4))
#define MVPP2_BM_BPPI_PTRS_NUM_REG(pool)	(0x6140 + ((pool) * 4))
#define     MVPP2_BM_BPPI_PTR_NUM_MASK		0x7ff
#define     MVPP2_BM_BPPI_PREFETCH_FULL_MASK	BIT(16)
#define MVPP2_BM_POOL_CTRL_REG(pool)		(0x6200 + ((pool) * 4))
#define     MVPP2_BM_START_MASK			BIT(0)
#define     MVPP2_BM_STOP_MASK			BIT(1)
#define     MVPP2_BM_STATE_MASK			BIT(4)
#define     MVPP2_BM_LOW_THRESH_OFFS		8
#define     MVPP2_BM_LOW_THRESH_MASK		0x7f00
#define     MVPP2_BM_LOW_THRESH_VALUE(val)	\
					((val) << MVPP2_BM_LOW_THRESH_OFFS)
#define     MVPP2_BM_HIGH_THRESH_OFFS		16
#define     MVPP2_BM_HIGH_THRESH_MASK		0x7f0000
#define     MVPP2_BM_HIGH_THRESH_VALUE(val)	\
					((val) << MVPP2_BM_HIGH_THRESH_OFFS)
#define MVPP2_BM_INTR_CAUSE_REG(pool)		(0x6240 + ((pool) * 4))
#define     MVPP2_BM_RELEASED_DELAY_MASK	BIT(0)
#define     MVPP2_BM_ALLOC_FAILED_MASK		BIT(1)
#define     MVPP2_BM_BPPE_EMPTY_MASK		BIT(2)
#define     MVPP2_BM_BPPE_FULL_MASK		BIT(3)
#define     MVPP2_BM_AVAILABLE_BP_LOW_MASK	BIT(4)
#define MVPP2_BM_INTR_MASK_REG(pool)		(0x6280 + ((pool) * 4))
#define MVPP2_BM_PHY_ALLOC_REG(pool)		(0x6400 + ((pool) * 4))
#define     MVPP2_BM_PHY_ALLOC_GRNTD_MASK	BIT(0)
#define MVPP2_BM_VIRT_ALLOC_REG			0x6440
#define MVPP22_BM_PHY_VIRT_HIGH_ALLOC_REG	0x6444
#define MVPP22_BM_PHY_HIGH_ALLOC_OFFSET		0
#define MVPP22_BM_VIRT_HIGH_ALLOC_OFFSET	8
#define MVPP22_BM_VIRT_HIGH_ALLOC_MASK		0xff00
#define MVPP2_BM_PHY_RLS_REG(pool)		(0x6480 + ((pool) * 4))
#define     MVPP2_BM_PHY_RLS_MC_BUFF_MASK	BIT(0)
#define     MVPP2_BM_PHY_RLS_PRIO_EN_MASK	BIT(1)
#define     MVPP2_BM_PHY_RLS_GRNTD_MASK		BIT(2)
#define MVPP2_BM_VIRT_RLS_REG			0x64c0
#define MVPP2_BM_DROP_CNTR_REG(pool)		(0x7300 + 4 * (pool))
#define MVPP2_BM_MC_DROP_CNTR_REG(pool)		(0x7340 + 4 * (pool))

#define MVPP22_BM_PHY_VIRT_HIGH_RLS_REG		0x64c4 /* Not a mixup */

#define MVPP22_BM_PHY_HIGH_RLS_OFFSET		0
#define MVPP22_BM_VIRT_HIGH_RLS_OFFST		8

#define MVPP22_BM_POOL_BASE_HIGH_REG		0x6310
#define MVPP22_BM_POOL_BASE_HIGH_MASK		0xff
#define     MVPP2_BM_PRIO_CTRL_REG		0x6800

/* TX Scheduler registers */
#define MVPP2_TXP_SCHED_PORT_INDEX_REG		0x8000
#define MVPP2_TXP_SCHED_Q_CMD_REG		0x8004
#define     MVPP2_TXP_SCHED_ENQ_MASK		0xff
#define     MVPP2_TXP_SCHED_DISQ_OFFSET		8
#define MVPP2_TXP_SCHED_CMD_1_REG		0x8010
#define MVPP2_TXP_SCHED_PERIOD_REG		0x8018
#define MVPP2_TXP_SCHED_MTU_REG			0x801c
#define     MVPP2_TXP_MTU_MAX			0x7FFFF
#define MVPP2_TXP_SCHED_REFILL_REG		0x8020
#define     MVPP2_TXP_REFILL_TOKENS_ALL_MASK	0x7ffff
#define     MVPP2_TXP_REFILL_PERIOD_ALL_MASK	0x3ff00000
#define     MVPP2_TXP_REFILL_PERIOD_MASK(v)	((v) << 20)
#define MVPP2_TXP_SCHED_TOKEN_SIZE_REG		0x8024
#define     MVPP2_TXP_TOKEN_SIZE_MAX		0xffffffff
#define MVPP2_TXQ_SCHED_REFILL_REG(q)		(0x8040 + ((q) << 2))
#define     MVPP2_TXQ_REFILL_TOKENS_ALL_MASK	0x7ffff
#define     MVPP2_TXQ_REFILL_PERIOD_ALL_MASK	0x3ff00000
#define     MVPP2_TXQ_REFILL_PERIOD_MASK(v)	((v) << 20)
#define MVPP2_TXQ_SCHED_TOKEN_SIZE_REG(q)	(0x8060 + ((q) << 2))
#define     MVPP2_TXQ_TOKEN_SIZE_MAX		0x7fffffff
#define MVPP2_TXQ_SCHED_TOKEN_CNTR_REG(q)	(0x8080 + ((q) << 2))
#define     MVPP2_TXQ_TOKEN_CNTR_MAX		0xffffffff
#define		MVPP2_TXP_SCHED_PERIOD_VAL		0x14d

/* TX general registers */
#define MVPP2_TX_SNOOP_REG			0x8800
#define MVPP2_TX_PORT_FLUSH_REG			0x8810
#define     MVPP2_TX_PORT_FLUSH_MASK(port)	(1 << (port))

#define MVPP22_TX_FIFO_THRESH_REG(eth_tx_port)	(0x8840 + ((eth_tx_port) << 2))
#define MVPP22_TX_FIFO_THRESH_MASK		0x3fff

/* LMS registers */
#define MVPP2_SRC_ADDR_MIDDLE			0x24
#define MVPP2_SRC_ADDR_HIGH			0x28
#define MVPP2_PHY_AN_CFG0_REG			0x34
#define MVPP2_PHY_AN_STOP_SMI0_MASK		BIT(7)
#define MVPP2_MIB_COUNTERS_BASE(port)		(0x1000 + ((port) >> 1) * \
						0x400 + (port) * 0x400)
#define     MVPP2_MIB_LATE_COLLISION		0x7c
#define MVPP2_ISR_SUM_MASK_REG			0x220c
#define MVPP2_MNG_EXTENDED_GLOBAL_CTRL_REG	0x305c
#define MVPP2_EXT_GLOBAL_CTRL_DEFAULT		0x27

/* Per-port registers */
#define MVPP2_GMAC_CTRL_0_REG			0x0
#define      MVPP2_GMAC_PORT_EN_MASK		BIT(0)
#define      MVPP2_GMAC_MAX_RX_SIZE_OFFS	2
#define      MVPP2_GMAC_MAX_RX_SIZE_MASK	0x7ffc
#define      MVPP2_GMAC_MIB_CNTR_EN_MASK	BIT(15)
#define MVPP2_GMAC_CTRL_1_REG			0x4
#define      MVPP2_GMAC_PERIODIC_XON_EN_MASK	BIT(1)
#define      MVPP2_GMAC_GMII_LB_EN_MASK		BIT(5)
#define      MVPP2_GMAC_PCS_LB_EN_BIT		6
#define      MVPP2_GMAC_PCS_LB_EN_MASK		BIT(6)
#define      MVPP2_GMAC_SA_LOW_OFFS		7
#define MVPP2_GMAC_CTRL_2_REG			0x8
#define      MVPP2_GMAC_INBAND_AN_MASK		BIT(0)
#define      MVPP2_GMAC_PCS_ENABLE_MASK		BIT(3)
#define      MVPP2_GMAC_PORT_RGMII_MASK		BIT(4)
#define      MVPP2_GMAC_PORT_RESET_MASK		BIT(6)
#define MVPP2_GMAC_AUTONEG_CONFIG		0xc
#define      MVPP2_GMAC_FORCE_LINK_DOWN		BIT(0)
#define      MVPP2_GMAC_FORCE_LINK_PASS		BIT(1)
#define      MVPP2_GMAC_CONFIG_MII_SPEED	BIT(5)
#define      MVPP2_GMAC_CONFIG_GMII_SPEED	BIT(6)
#define      MVPP2_GMAC_AN_SPEED_EN		BIT(7)
#define      MVPP2_GMAC_FC_ADV_EN		BIT(9)
#define      MVPP2_GMAC_CONFIG_FULL_DUPLEX	BIT(12)
#define      MVPP2_GMAC_AN_DUPLEX_EN		BIT(13)
#define MVPP2_GMAC_PORT_FIFO_CFG_1_REG		0x1c
#define      MVPP2_GMAC_TX_FIFO_MIN_TH_OFFS	6
#define      MVPP2_GMAC_TX_FIFO_MIN_TH_ALL_MASK	0x1fc0
#define      MVPP2_GMAC_TX_FIFO_MIN_TH_MASK(v)	(((v) << 6) & \
					MVPP2_GMAC_TX_FIFO_MIN_TH_ALL_MASK)

#define MVPP2_ISR_ENABLE_REG(port)		(0x5420 + 4 * (port))
#define MVPP2_ISR_ENABLE_INTERRUPT(mask)	((mask) & 0xffff)
#define MVPP2_ISR_DISABLE_INTERRUPT(mask)	(((mask) << 16) & 0xffff0000)

/* Parser constants */
#define MVPP2_PRS_TCAM_SRAM_SIZE	256
#define MVPP2_PRS_TCAM_WORDS		6
#define MVPP2_PRS_SRAM_WORDS		4
#define MVPP2_PRS_FLOW_ID_SIZE		64
#define MVPP2_PRS_FLOW_ID_MASK		0x3f
#define MVPP2_PRS_TCAM_ENTRY_INVALID	1
#define MVPP2_PRS_TCAM_DSA_TAGGED_BIT	BIT(5)
#define MVPP2_PRS_IPV4_HEAD		0x40
#define MVPP2_PRS_IPV4_HEAD_MASK	0xf0
#define MVPP2_PRS_IPV4_MC		0xe0
#define MVPP2_PRS_IPV4_MC_MASK		0xf0
#define MVPP2_PRS_IPV4_BC_MASK		0xff
#define MVPP2_PRS_IPV4_IHL		0x5
#define MVPP2_PRS_IPV4_IHL_MASK		0xf
#define MVPP2_PRS_IPV6_MC		0xff
#define MVPP2_PRS_IPV6_MC_MASK		0xff
#define MVPP2_PRS_IPV6_HOP_MASK		0xff
#define MVPP2_PRS_TCAM_PROTO_MASK	0xff
#define MVPP2_PRS_TCAM_PROTO_MASK_L	0x3f
#define MVPP2_PRS_DBL_VLANS_MAX		100

/*
 HW_BYTE_OFFS
 return HW byte offset in 4 bytes register
 _offs_: native offset (LE), only support LE in uboot
 LE example: HW_BYTE_OFFS(1) = 1
 BE example: HW_BYTE_OFFS(1) = 2
*/
#define SRAM_BIT_TO_BYTE(_bit_)			HW_BYTE_OFFS((_bit_) / 8)

#define HW_BYTE_OFFS(_offs_)		(_offs_)


#define TCAM_DATA_BYTE_OFFS_LE(_offs_)	\
			(((_offs_) - ((_offs_) % 2)) * 2 + ((_offs_) % 2))
#define TCAM_DATA_MASK_OFFS_LE(_offs_)   \
				(((_offs_) * 2) - ((_offs_) % 2)  + 2)

/*
 TCAM_DATA_BYTE/MASK
 tcam data devide into 4 bytes registers
 each register include 2 bytes of data and 2 bytes of mask
 the next macros calc data/mask offset in 4 bytes register
 _offs_: native offset (LE) in data bytes array
 relevant only for TCAM data bytes
 used by PRS and CLS2
*/
#define TCAM_DATA_BYTE(_offs_)	(HW_BYTE_OFFS(TCAM_DATA_BYTE_OFFS_LE(_offs_)))
#define TCAM_DATA_MASK(_offs_)	(HW_BYTE_OFFS(TCAM_DATA_MASK_OFFS_LE(_offs_)))
/* Tcam structure:
 * - lookup ID - 4 bits
 * - port ID - 1 byte
 * - additional information - 1 byte
 * - header data - 8 bytes
 * The fields are represented by MVPP2_PRS_TCAM_DATA_REG(5)->(0).
 */
#define MVPP2_PRS_PORT_MASK			0xff
#define MVPP2_PRS_LU_MASK			0xf
#define MVPP2_PRS_TCAM_DATA_BYTE(offs)		\
				  (((offs) - ((offs) % 2)) * 2 + ((offs) % 2))
#define MVPP2_PRS_TCAM_DATA_BYTE_EN(offs)	\
					      (((offs) * 2) - ((offs) % 2)  + 2)
#define MVPP2_PRS_TCAM_AI_BYTE			16
#define MVPP2_PRS_TCAM_PORT_BYTE		17
#define MVPP2_PRS_TCAM_LU_BYTE			20
#define MVPP2_PRS_TCAM_EN_OFFS(offs)		((offs) + 2)
#define MVPP2_PRS_TCAM_INV_WORD			5
#define MVPP2_PRS_TCAM_INV_MASK			BIT(31)

/* Tcam entries ID */
#define MVPP2_PE_DROP_ALL		0
#define MVPP2_PE_FIRST_FREE_TID		1
#define MVPP2_PE_LAST_FREE_TID		(MVPP2_PRS_TCAM_SRAM_SIZE - 31)
#define MVPP2_PE_IP6_EXT_PROTO_UN	(MVPP2_PRS_TCAM_SRAM_SIZE - 30)
#define MVPP2_PE_MAC_MC_IP6		(MVPP2_PRS_TCAM_SRAM_SIZE - 29)
#define MVPP2_PE_IP6_ADDR_UN		(MVPP2_PRS_TCAM_SRAM_SIZE - 28)
#define MVPP2_PE_IP4_ADDR_UN		(MVPP2_PRS_TCAM_SRAM_SIZE - 27)
#define MVPP2_PE_LAST_DEFAULT_FLOW	(MVPP2_PRS_TCAM_SRAM_SIZE - 26)
#define MVPP2_PE_FIRST_DEFAULT_FLOW	(MVPP2_PRS_TCAM_SRAM_SIZE - 19)
#define MVPP2_PE_EDSA_TAGGED		(MVPP2_PRS_TCAM_SRAM_SIZE - 18)
#define MVPP2_PE_EDSA_UNTAGGED		(MVPP2_PRS_TCAM_SRAM_SIZE - 17)
#define MVPP2_PE_DSA_TAGGED		(MVPP2_PRS_TCAM_SRAM_SIZE - 16)
#define MVPP2_PE_DSA_UNTAGGED		(MVPP2_PRS_TCAM_SRAM_SIZE - 15)
#define MVPP2_PE_ETYPE_EDSA_TAGGED	(MVPP2_PRS_TCAM_SRAM_SIZE - 14)
#define MVPP2_PE_ETYPE_EDSA_UNTAGGED	(MVPP2_PRS_TCAM_SRAM_SIZE - 13)
#define MVPP2_PE_ETYPE_DSA_TAGGED	(MVPP2_PRS_TCAM_SRAM_SIZE - 12)
#define MVPP2_PE_ETYPE_DSA_UNTAGGED	(MVPP2_PRS_TCAM_SRAM_SIZE - 11)
#define MVPP2_PE_MH_DEFAULT		(MVPP2_PRS_TCAM_SRAM_SIZE - 10)
#define MVPP2_PE_DSA_DEFAULT		(MVPP2_PRS_TCAM_SRAM_SIZE - 9)
#define MVPP2_PE_IP6_PROTO_UN		(MVPP2_PRS_TCAM_SRAM_SIZE - 8)
#define MVPP2_PE_IP4_PROTO_UN		(MVPP2_PRS_TCAM_SRAM_SIZE - 7)
#define MVPP2_PE_ETH_TYPE_UN		(MVPP2_PRS_TCAM_SRAM_SIZE - 6)
#define MVPP2_PE_VLAN_DBL		(MVPP2_PRS_TCAM_SRAM_SIZE - 5)
#define MVPP2_PE_VLAN_NONE		(MVPP2_PRS_TCAM_SRAM_SIZE - 4)
#define MVPP2_PE_MAC_MC_ALL		(MVPP2_PRS_TCAM_SRAM_SIZE - 3)
#define MVPP2_PE_MAC_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 2)
#define MVPP2_PE_MAC_NON_PROMISCUOUS	(MVPP2_PRS_TCAM_SRAM_SIZE - 1)

/* Sram structure
 * The fields are represented by MVPP2_PRS_TCAM_DATA_REG(3)->(0).
 */
#define MVPP2_PRS_SRAM_RI_OFFS			0
#define MVPP2_PRS_SRAM_RI_WORD			0
#define MVPP2_PRS_SRAM_RI_BITS			32
#define MVPP2_PRS_SRAM_RI_CTRL_OFFS		32
#define MVPP2_PRS_SRAM_RI_CTRL_WORD		1
#define MVPP2_PRS_SRAM_RI_CTRL_BITS		32
#define MVPP2_PRS_SRAM_SHIFT_OFFS		64
#define MVPP2_PRS_SRAM_SHIFT_BITS		8
#define MVPP2_PRS_SRAM_SHIFT_SIGN_BIT		72
#define MVPP2_PRS_SRAM_UDF_OFFS			73
#define MVPP2_PRS_SRAM_UDF_BITS			8
#define MVPP2_PRS_SRAM_UDF_MASK			0xff
#define MVPP2_PRS_SRAM_UDF_SIGN_BIT		81
#define MVPP2_PRS_SRAM_UDF_TYPE_OFFS		82
#define MVPP2_PRS_SRAM_UDF_TYPE_MASK		0x7
#define MVPP2_PRS_SRAM_UDF_TYPE_L3		1
#define MVPP2_PRS_SRAM_UDF_TYPE_L4		4
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_OFFS	85
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_BITS	2
#define MVPP2_PRS_SRAM_OP_SEL_BITS		5
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_MASK	0x3
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_ADD		1
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_IP4_ADD	2
#define MVPP2_PRS_SRAM_OP_SEL_SHIFT_IP6_ADD	3
#define MVPP2_PRS_SRAM_OP_SEL_UDF_OFFS		87
#define MVPP2_PRS_SRAM_OP_SEL_UDF_BITS		2
#define MVPP2_PRS_SRAM_OP_SEL_UDF_MASK		0x3
#define MVPP2_PRS_SRAM_OP_SEL_UDF_ADD		0
#define MVPP2_PRS_SRAM_OP_SEL_UDF_IP4_ADD	2
#define MVPP2_PRS_SRAM_OP_SEL_UDF_IP6_ADD	3
#define MVPP2_PRS_SRAM_OP_SEL_BASE_OFFS		89
#define MVPP2_PRS_SRAM_AI_OFFS			90
#define MVPP2_PRS_SRAM_AI_CTRL_OFFS		98
#define MVPP2_PRS_SRAM_AI_CTRL_BITS		8
#define MVPP2_PRS_SRAM_AI_MASK			0xff
#define MVPP2_PRS_SRAM_NEXT_LU_OFFS		106
#define MVPP2_PRS_SRAM_NEXT_LU_MASK		0xf
#define MVPP2_PRS_SRAM_LU_DONE_BIT		110
#define MVPP2_PRS_SRAM_LU_GEN_BIT		111

/* Sram result info bits assignment */
#define MVPP2_PRS_RI_MAC_ME_MASK		0x1
#define MVPP2_PRS_RI_DSA_MASK			0x2
#define MVPP2_PRS_RI_VLAN_OFFS			2
#define MVPP2_PRS_RI_VLAN_MASK			0xc
#define MVPP2_PRS_RI_VLAN_NONE			0x0
#define MVPP2_PRS_RI_VLAN_SINGLE		BIT(2)
#define MVPP2_PRS_RI_VLAN_DOUBLE		BIT(3)
#define MVPP2_PRS_RI_VLAN_TRIPLE		(BIT(2) | BIT(3))
#define MVPP2_PRS_RI_CPU_CODE_MASK		0x70
#define MVPP2_PRS_RI_CPU_CODE_RX_SPEC		BIT(4)
#define MVPP2_PRS_RI_L2_CAST_OFFS		9
#define MVPP2_PRS_RI_L2_CAST_MASK		0x600
#define MVPP2_PRS_RI_L2_UCAST			0x0
#define MVPP2_PRS_RI_L2_MCAST			BIT(9)
#define MVPP2_PRS_RI_L2_BCAST			BIT(10)
#define MVPP2_PRS_RI_PPPOE_MASK			0x800
#define MVPP2_PRS_RI_L3_PROTO_MASK		0x7000
#define MVPP2_PRS_RI_L3_UN			0x0
#define MVPP2_PRS_RI_L3_IP4			BIT(12)
#define MVPP2_PRS_RI_L3_IP4_OPT			BIT(13)
#define MVPP2_PRS_RI_L3_IP4_OTHER		(BIT(12) | BIT(13))
#define MVPP2_PRS_RI_L3_IP6			BIT(14)
#define MVPP2_PRS_RI_L3_IP6_EXT			(BIT(12) | BIT(14))
#define MVPP2_PRS_RI_L3_ARP			(BIT(13) | BIT(14))
#define MVPP2_PRS_RI_L3_ADDR_MASK		0x18000
#define MVPP2_PRS_RI_L3_UCAST			0x0
#define MVPP2_PRS_RI_L3_MCAST			BIT(15)
#define MVPP2_PRS_RI_L3_BCAST			(BIT(15) | BIT(16))
#define MVPP2_PRS_RI_IP_FRAG_MASK		0x20000
#define MVPP2_PRS_RI_IP_FRAG_TRUE		BIT(17)
#define MVPP2_PRS_RI_IP_FRAG_FALSE		0x0
#define MVPP2_PRS_RI_UDF3_MASK			0x300000
#define MVPP2_PRS_RI_UDF3_RX_SPECIAL		BIT(21)
#define MVPP2_PRS_RI_L4_PROTO_MASK		0x1c00000
#define MVPP2_PRS_RI_L4_TCP			BIT(22)
#define MVPP2_PRS_RI_L4_UDP			BIT(23)
#define MVPP2_PRS_RI_L4_OTHER			(BIT(22) | BIT(23))
#define MVPP2_PRS_RI_UDF7_MASK			0x60000000
#define MVPP2_PRS_RI_UDF7_IP6_LITE		BIT(29)
#define MVPP2_PRS_RI_DROP_MASK			0x80000000

#define MVPP2_PRS_SRAM_BIT_TO_BYTE(_bit_)	HW_BYTE_OFFS((_bit_) / 8)
#define MVPP2_PRS_SRAM_SHIFT_MASK	((1 << MVPP2_PRS_SRAM_SHIFT_BITS) - 1)

/* Classifier constants */
#define MVPP2_CLS_FLOWS_TBL_SIZE	512
#define MVPP2_CLS_FLOWS_TBL_DATA_WORDS	3
#define MVPP2_CLS_LKP_TBL_SIZE		64

/* BM constants */
#define MVPP2_BM_POOLS_NUM		8
#define MVPP2_BM_LONG_BUF_NUM		1024
#define MVPP2_BM_SHORT_BUF_NUM		2048
#define MVPP2_BM_POOL_SIZE_MAX		(16*1024 - MVPP2_BM_POOL_PTR_ALIGN/4)
#define MVPP2_BM_POOL_PTR_ALIGN		128
#define MVPP2_BM_SWF_LONG_POOL(port)	((port > 2) ? 2 : port)
#define MVPP2_BM_SWF_SHORT_POOL		3

/* BM cookie (32 bits) definition */
#define MVPP2_BM_COOKIE_POOL_OFFS	8
#define MVPP2_BM_COOKIE_CPU_OFFS	24

/* The mv_pp2x_tx_desc and mv_pp2x_rx_desc structures describe the
 * layout of the transmit and reception DMA descriptors, and their
 * layout is therefore defined by the hardware design
 */

#define MVPP2_TXD_L3_OFF_SHIFT		0
#define MVPP2_TXD_IP_HLEN_SHIFT		8
#define MVPP2_TXD_L4_CSUM_FRAG		BIT(13)
#define MVPP2_TXD_L4_CSUM_NOT		BIT(14)
#define MVPP2_TXD_IP_CSUM_DISABLE	BIT(15)
#define MVPP2_TXD_PADDING_DISABLE	BIT(23)
#define MVPP2_TXD_L4_UDP		BIT(24)
#define MVPP2_TXD_L3_IP6		BIT(26)
#define MVPP2_TXD_L_DESC		BIT(28)
#define MVPP2_TXD_F_DESC		BIT(29)
#define MVPP2TX_DESC_ALIGN		0x1F

#define MVPP2_RXD_ERR_SUMMARY		BIT(15)
#define MVPP2_RXD_ERR_CODE_MASK		(BIT(13) | BIT(14))
#define MVPP2_RXD_ERR_CRC		0x0
#define MVPP2_RXD_ERR_OVERRUN		BIT(13)
#define MVPP2_RXD_ERR_RESOURCE		(BIT(13) | BIT(14))
#define MVPP2_RXD_BM_POOL_ID_OFFS	16
#define MVPP2_RXD_BM_POOL_ID_MASK	(BIT(16) | BIT(17) | BIT(18))
#define MVPP2_RXD_HWF_SYNC		BIT(21)
#define MVPP2_RXD_L4_CSUM_OK		BIT(22)
#define MVPP2_RXD_IP4_HEADER_ERR	BIT(24)
#define MVPP2_RXD_L4_TCP		BIT(25)
#define MVPP2_RXD_L4_UDP		BIT(26)
#define MVPP2_RXD_L3_IP4		BIT(28)
#define MVPP2_RXD_L3_IP6		BIT(30)
#define MVPP2_RXD_BUF_HDR		BIT(31)

/* Timeout constants */
#define MVPP2_TX_DISABLE_TIMEOUT_MSEC	1000
#define MVPP2_RX_DISABLE_TIMEOUT_MSEC	1000
#define MVPP2_TX_FIFO_EMPTY_TIMEOUT	10000
#define MVPP2_PORT_DISABLE_WAIT_TCLOCKS	5000
#define MVPP2_TX_PENDING_TIMEOUT_MSEC	1000
#define MVPP2_TX_SEND_TIMEOUT		10000

/* The two bytes Marvell header. Either contains a special value used
 * by Marvell switches when a specific hardware mode is enabled (not
 * supported by this driver) or is filled automatically by zeroes on
 * the RX side. Those two bytes being at the front of the Ethernet
 * header, they allow to have the IP header aligned on a 4 bytes
 * boundary automatically: the hardware skips those two bytes on its
 * own.
 */
#define MVPP2_MH_SIZE			2
#define MVPP2_ETH_TYPE_LEN		2
#define MVPP2_VLAN_TAG_LEN		4

/* Maximum number of T-CONTs of PON port */
#define MVPP2_MAX_TCONT			16

/* Maximum number of TXQs used by single port */
#define MVPP2_MAX_TXQ			8

/* Maximum number of TXQs used by single port */
#define MVPP2_MAX_RXQ			8

/* Descriptor ring Macros */
#define MVPP2_QUEUE_NEXT_DESC(q, index) \
	(((index) < (q)->last_desc) ? ((index) + 1) : 0)

/******************************************************************************/
/* System Soft Reset 1 */
#define MV_GOP_SOFT_RESET_1_REG		0x108

#define NETC_GOP_SOFT_RESET_OFFSET		6
#define NETC_GOP_SOFT_RESET_MASK	(0x1 << NETC_GOP_SOFT_RESET_OFFSET)

/* Ports Control 0 */
#define MV_NETCOMP_PORTS_CONTROL_0	(0x110)

#define NETC_CLK_DIV_PHASE_OFFSET		31
#define NETC_CLK_DIV_PHASE_MASK		(0x1 << NETC_CLK_DIV_PHASE_OFFSET)

#define NETC_GIG_RX_DATA_SAMPLE_OFFSET		29
#define NETC_GIG_RX_DATA_SAMPLE_MASK	(0x1 << NETC_GIG_RX_DATA_SAMPLE_OFFSET)

#define NETC_BUS_WIDTH_SELECT_OFFSET		1
#define NETC_BUS_WIDTH_SELECT_MASK	(0x1 << NETC_BUS_WIDTH_SELECT_OFFSET)

#define NETC_GOP_ENABLE_OFFSET			0
#define NETC_GOP_ENABLE_MASK		(0x1 << NETC_GOP_ENABLE_OFFSET)

/* Ports Control 1 */
#define MV_NETCOMP_PORTS_CONTROL_1	(0x114)

#define NETC_PORT_GIG_RF_RESET_OFFSET(port)	(28 + port)
#define NETC_PORT_GIG_RF_RESET_MASK(port)	\
	(0x1 << NETC_PORT_GIG_RF_RESET_OFFSET(port))

#define NETC_PORTS_ACTIVE_OFFSET(port)		(0 + port)
#define NETC_PORTS_ACTIVE_MASK(port)	(0x1 << NETC_PORTS_ACTIVE_OFFSET(port))

/* Ports Status */
#define MV_NETCOMP_PORTS_STATUS		(0x11C)
#define NETC_PORTS_STATUS_OFFSET(port)		(0 + port)
#define NETC_PORTS_STATUS_MASK(port)	(0x1 << NETC_PORTS_STATUS_OFFSET(port))

/* Networking Complex Control 0 */
#define MV_NETCOMP_CONTROL_0		(0x120)

#define NETC_GBE_PORT1_MII_MODE_OFFSET		2
#define NETC_GBE_PORT1_MII_MODE_MASK	\
	(0x1 << NETC_GBE_PORT1_MII_MODE_OFFSET)

#define NETC_GBE_PORT1_SGMII_MODE_OFFSET	1
#define NETC_GBE_PORT1_SGMII_MODE_MASK	\
	(0x1 << NETC_GBE_PORT1_SGMII_MODE_OFFSET)

#define NETC_GBE_PORT0_SGMII_MODE_OFFSET	0
#define NETC_GBE_PORT0_SGMII_MODE_MASK	\
	(0x1 << NETC_GBE_PORT0_SGMII_MODE_OFFSET)

/* ComPhy Selector */
#define COMMON_PHYS_SELECT_REG		(0x40)

#define COMMON_PHYS_SELECT_LANE_OFFSET(lane)	(4 * lane)
#define COMMON_PHYS_SELECT_LANE_MASK(lane)    \
	(0xF << COMMON_PHYS_SELECT_LANE_OFFSET(lane))
#define COMMON_PHYS_SELECT_LANE_UNCONNECTED	(0x0)

#define COMMON_PHYS_SELECT_LANE_0_ETH2		(0x1)
#define COMMON_PHYS_SELECT_LANE_1_ETH3    \
	(0x1 << COMMON_PHYS_SELECT_LANE_OFFSET(1))
#define COMMON_PHYS_SELECT_LANE_2_ETH0    \
	(0x1 << COMMON_PHYS_SELECT_LANE_OFFSET(2))
#define COMMON_PHYS_SELECT_LANE_3_ETH1    \
	(0x1 << COMMON_PHYS_SELECT_LANE_OFFSET(3))
#define COMMON_PHYS_SELECT_LANE_3_ETH2    \
	(0x2 << COMMON_PHYS_SELECT_LANE_OFFSET(3))
#define COMMON_PHYS_SELECT_LANE_4_ETH2    \
	(0x1 << COMMON_PHYS_SELECT_LANE_OFFSET(4))
#define COMMON_PHYS_SELECT_LANE_4_ETH0    \
	(0x2 << COMMON_PHYS_SELECT_LANE_OFFSET(4))
#define COMMON_PHYS_SELECT_LANE_5_ETH3    \
	(0x1 << COMMON_PHYS_SELECT_LANE_OFFSET(5))
#define COMMON_PHYS_SELECT_LANE_5_ETH1    \
	(0x2 << COMMON_PHYS_SELECT_LANE_OFFSET(5))

/* SD1 Control1 */
#define SD1_CONTROL_1_REG		(0x148)

#define SD1_CONTROL_XAUI_EN_OFFSET		28
#define SD1_CONTROL_XAUI_EN_MASK	(0x1 << SD1_CONTROL_XAUI_EN_OFFSET)

#define SD1_CONTROL_RXAUI0_L23_EN_OFFSET	27
#define SD1_CONTROL_RXAUI0_L23_EN_MASK	(0x1 << \
					SD1_CONTROL_RXAUI0_L23_EN_OFFSET)

#define SD1_CONTROL_RXAUI1_L45_EN_OFFSET	26
#define SD1_CONTROL_RXAUI1_L45_EN_MASK	(0x1 << \
					SD1_CONTROL_RXAUI1_L45_EN_OFFSET)

/*Port speeds */
#define	MV_PORT_SPEED_10	10
#define	MV_PORT_SPEED_100	100
#define	MV_PORT_SPEED_1000	1000
#define	MV_PORT_SPEED_2500	2500
#define	MV_PORT_SPEED_10000	10000

enum mv_pp2x_bm_type {
	MVPP2_BM_FREE,
	MVPP2_BM_SWF_LONG,
	MVPP2_BM_SWF_SHORT
};

/* Marvell tag types */
enum mv_pp2x_tag_type {
	MVPP2_TAG_TYPE_NONE = 0,
	MVPP2_TAG_TYPE_MH   = 1,
	MVPP2_TAG_TYPE_DSA  = 2,
	MVPP2_TAG_TYPE_EDSA = 3,
	MVPP2_TAG_TYPE_VLAN = 4,
	MVPP2_TAG_TYPE_LAST = 5
};

/* Max number of Rx descriptors */
#define MVPP2_MAX_RXD 32

/* Max number of Tx descriptors */
#define MVPP2_MAX_TXD 32

/* Max number of Tx descriptors in each aggregated queue */
#define MVPP2_AGGR_TXQ_SIZE	 32

/* Macro for alignment down*/
#define MV_ALIGN_DOWN(number, align) ((number) & ~((align)-1))

/* Descriptor aligned size */
#define MVPP2_DESC_ALIGNED_SIZE		32
#define MVPP2_DESC_Q_ALIGN		512

#define MVPP2_DESCQ_MEM_SIZE(descs)	\
			(descs * MVPP2_DESC_ALIGNED_SIZE + MVPP2_DESC_Q_ALIGN)
#define MVPP2_DESCQ_MEM_ALIGN(mem)	(ALIGN(mem, MVPP2_DESC_Q_ALIGN))

#define MVPP2_BIT_TO_BYTE(bit)		((bit) / 8)

/* 802.3 types */
#define MV_IP_TYPE                  0x0800
#define MV_IP_ARP_TYPE              0x0806
#define MV_IP_LBDT_TYPE             0xfffa
#define MV_IP6_TYPE                 0x86dd
#define MV_APPLE_TALK_ARP_TYPE      0x80F3
#define MV_NOVELL_IPX_TYPE          0x8137
#define MV_EAPOL_TYPE               0x888e
#define MV_VLAN_TYPE                0x8100
#define MV_VLAN_1_TYPE              0x88A8
#define MV_PPPOE_TYPE               0x8864
#define MVPP2_IP_LBDT_TYPE          0xfffa
#define MV_EDSA_TYPE                0xdada
#define MV_PPP_IP_TYPE              0x21
#define MV_PPP_IP6_TYPE             0x57

/* DSA/EDSA type */
#define MVPP2_PRS_TAGGED		true
#define MVPP2_PRS_UNTAGGED		false
#define MVPP2_PRS_EDSA			true
#define MVPP2_PRS_DSA			false

/* IPv6 max L3 address size */
#define MVPP2_MAX_L3_ADDR_SIZE		16

/* RX FIFO constants */
#define MVPP2_RX_FIFO_10GB_PORT_DATA_SIZE	0x8000
#define MVPP2_RX_FIFO_2_5GB_PORT_DATA_SIZE	0x2000
#define MVPP2_RX_FIFO_1GB_PORT_DATA_SIZE	0x1000
#define MVPP2_RX_FIFO_10GB_PORT_ATTR_SIZE	0x200
#define MVPP2_RX_FIFO_2_5GB_PORT_ATTR_SIZE	0x80
#define MVPP2_RX_FIFO_1GB_PORT_ATTR_SIZE	0x40
#define MVPP2_RX_FIFO_PORT_MIN_PKT		0x80

/* TX general registers */
#define MVPP22_TX_FIFO_SIZE_REG(eth_tx_port)	(0x8860 + ((eth_tx_port) << 2))
#define MVPP22_TX_FIFO_SIZE_MASK		0xf

/* TX FIFO constants */
#define MVPP2_TX_FIFO_DATA_SIZE_10KB		0xa
#define MVPP2_TX_FIFO_DATA_SIZE_3KB		0x3

/* Number of ports */
#define CONFIG_MAX_PP2_PORT_NUM 3

#define __FILENAME__ (strrchr(__FILE__, '/') ? \
	strrchr(__FILE__, '/') + 1 : __FILE__)

#define MVPP2_PRINT_LINE() \
	printf("Passed: %s(%d)\n", __FILENAME__, __LINE__)

/* Masks used for pp2_emac flags */
#define MV_EMAC_F_LINK_UP_BIT	0
#define MV_EMAC_F_INIT_BIT	1
#define MV_EMAC_F_SGMII2_5_BIT	2

#define MV_EMAC_F_LINK_UP	(1 << MV_EMAC_F_LINK_UP_BIT)
#define MV_EMAC_F_INIT		(1 << MV_EMAC_F_INIT_BIT)
#define MV_EMAC_F_SGMII2_5	(1 << MV_EMAC_F_SGMII2_5_BIT)

/* MPCS registers */
#define PCS40G_COMMON_CONTROL					(0x014)

#define FORWARD_ERROR_CORRECTION_OFFSET				10
#define FORWARD_ERROR_CORRECTION_MASK	\
	(0x1 << FORWARD_ERROR_CORRECTION_OFFSET)

#define PCS_CLOCK_RESET						(0x14C)

#define CLK_DIV_PHASE_SET_OFFSET				11
#define CLK_DIV_PHASE_SET_MASK	\
	(0x1 << CLK_DIV_PHASE_SET_OFFSET)

#define CLK_DIVISION_RATIO_OFFSET				4
#define CLK_DIVISION_RATIO_MASK	\
	(0x7 << CLK_DIVISION_RATIO_OFFSET)

#define MAC_CLK_RESET_OFFSET					2
#define MAC_CLK_RESET_MASK	\
	(0x1 << MAC_CLK_RESET_OFFSET)

#define RX_SD_CLK_RESET_OFFSET					1
#define RX_SD_CLK_RESET_MASK	\
	(0x1 << RX_SD_CLK_RESET_OFFSET)

#define TX_SD_CLK_RESET_OFFSET					0
#define TX_SD_CLK_RESET_MASK	\
	(0x1 << TX_SD_CLK_RESET_OFFSET)

/* Definitions */

struct avanta_lp_gop_hw {
	void __iomem *lms_base;
};

struct mv_mac_unit_desc {
	void __iomem *base;
	u32  obj_size;
};

struct cpn110_gop_hw {
	struct mv_mac_unit_desc gmac;
	struct mv_mac_unit_desc xlg_mac;
	struct mv_mac_unit_desc serdes;
	struct mv_mac_unit_desc xmib;
	void __iomem *smi_base;
	void __iomem *xsmi_base;
	void __iomem *mspg_base;
	void __iomem *xpcs_base;
	void __iomem *rfu1_base;
};

struct gop_hw {
	union {
		struct avanta_lp_gop_hw gop_alp;
		struct cpn110_gop_hw gop_110;
	};
};

/* Shared Packet Processor resources */
struct mv_pp2x {
	/* Shared registers' base addresses */
	void __iomem *base;
	void __iomem *lms_base;

	struct gop_hw gop;

	/* Common clocks */
	struct clk *pp_clk;
	struct clk *gop_clk;

	/* List of pointers to port structures */
	struct mv_pp2x_port **port_list;

	/* Aggregated TXQs */
	struct mv_pp2x_tx_queue *aggr_txqs;

	/* BM pools */
	struct mv_pp2x_bm_pool *bm_pools;

	/* Tclk value */
	u32 tclk;

	spinlock_t lock;
};

struct mv_mac_data {
	u8			gop_index;
	unsigned long		flags;
	/* Whether a PHY is present, and if yes, at which address. */
	int			phy_addr;
	phy_interface_t		phy_mode; /* RXAUI, SGMII, etc. */
	struct phy_device	*phy_dev;
	bool			force_link;
	unsigned int		autoneg;
	unsigned int		link;
	unsigned int		duplex;
	unsigned int		speed;
};

struct mv_pp2x_port {
	u8 id;

	struct mv_pp2x *pp2;

	/* Per-port registers' base address */
	void __iomem *base;

	struct mv_pp2x_rx_queue *rxqs;
	struct mv_pp2x_tx_queue *txqs;

	int pkt_size;

	u8 mcast_count[256];
	u16 tx_ring_size;
	u16 rx_ring_size;

	struct mii_dev *bus;

	struct mv_mac_data mac_data;

	struct mv_pp2x_bm_pool *pool_long;
	struct mv_pp2x_bm_pool *pool_short;

	/* Number of physical transmit ports - should be set to 1 for
	 * ethernet ports and 16 for PON port
	 */
	u8 txp_num;

	/* Index of first port's physical RXQ */
	u8 first_rxq;
	int init;
};

struct mv_pp2x_dev_param {
	int dev_num;
	void __iomem *base;
	int phy_addr;
	int gop_port;
	phy_interface_t phy_type;
	u32 *phy_handle;
	int phy_speed;
	int interface;
	bool force_link;
	int cp_index;
};

struct pp21_specific_tx_desc {
	u32 buf_phys_addr;	/* physical addr of transmitted buffer	*/
	u32 buf_cookie;	/* cookie for access to TX buffer in tx path */
	u32 rsrvd_hw_cmd[3];	/* hw_cmd (for future use, BM, PON, PNC) */
	u32 rsrvd1;		/* reserved (for future use)		*/
};

struct pp22_specific_tx_desc {
	u64 rsrvd_hw_cmd1;	/* hw_cmd (BM, PON, PNC) */
	u64 buf_phys_addr_hw_cmd2;
	u64 buf_cookie_bm_qset_hw_cmd3;
		/* cookie for access to RX buffer in rx path */
		/* cookie for access to RX buffer in rx path */
		/* bm_qset (for future use, BM)		*/
		/* classify_info (for future use, PnC)	*/
};

union pp2x_specific_tx_desc {
	struct pp21_specific_tx_desc pp21;
	struct pp22_specific_tx_desc pp22;
};

struct mv_pp2x_tx_desc {
	u32 command;		/* Options used by HW for packet xmitting */
	u8  packet_offset;	/* the offset from the buffer beginning	*/
	u8  phys_txq;		/* destination queue ID			*/
	u16 data_size;		/* data size of transmitted packet in bytes */
	union pp2x_specific_tx_desc u;
};

struct pp21_specific_rx_desc {
	u32 buf_phys_addr;	/* physical address of the buffer	*/
	u32 buf_cookie;	/* cookie for access to RX buffer in rx path */
	u16 rsrvd_gem;		/* gem_port_id (for future use, PON)	*/
	u16 rsrvd_l4csum;	/* csum_l4 (for future use, PnC)	*/
	u8  rsrvd_bm_qset;	/* bm_qset (for future use, BM)		*/
	u8  rsrvd1;
	u16 rsrvd_cls_info;	/* classify_info (for future use, PnC)	*/
	u32 rsrvd_flow_id;	/* flow_id (for future use, PnC) */
	u32 rsrvd_abs;
};
struct pp22_specific_rx_desc {
	u16 rsrvd_gem;		/* gem_port_id (for future use, PON)	*/
	u16 rsrvd_l4csum;	/* csum_l4 (for future use, PnC)	*/
	u32 rsrvd_timestamp;
	u64 buf_phys_addr_key_hash;
	u64 buf_cookie_bm_qset_cls_info;
	/* cookie for access to RX buffer in rx path */
	/* bm_qset (for future use, BM)		*/
	/* classify_info (for future use, PnC)	*/
};

union pp2x_specific_rx_desc {
	struct pp21_specific_rx_desc pp21;
	struct pp22_specific_rx_desc pp22;
};

struct mv_pp2x_rx_desc {
	u32 status;		/* info about received packet		*/
	u16 rsrvd_parser;	/* parser_info (for future use, PnC)	*/
	u16 data_size;		/* size of received packet in bytes	*/
	union pp2x_specific_rx_desc u;
};

/* Per-CPU Tx queue control */
struct mv_pp2x_txq_pcpu {
	int cpu;

	/* Number of Tx DMA descriptors in the descriptor ring */
	int size;

	/* Number of currently used Tx DMA descriptor in the
	 * descriptor ring
	 */
	int count;

	/* Number of Tx DMA descriptors reserved for each CPU */
	int reserved_num;

	/* Index of last TX DMA descriptor that was inserted */
	int txq_put_index;

	/* Index of the TX DMA descriptor to be cleaned up */
	int txq_get_index;
};

struct mv_pp2x_tx_queue {
	/* Physical number of this Tx queue */
	u8 id;

	/* Logical number of this Tx queue */
	u8 log_id;

	/* Number of port's egress port - 0 for ethernet, 0-15 for PON */
	u8 txp;

	/* Number of Tx DMA descriptors in the descriptor ring */
	int size;

	/* Number of currently used Tx DMA descriptor in the
	 * descriptor ring
	 */

	/* Per-CPU control of physical Tx queues */
	/* Virtual address of thex Tx DMA descriptors array */
	struct mv_pp2x_tx_desc *descs;

	/* DMA address of the Tx DMA descriptors array */
	dma_addr_t descs_phys;

	/* Index of the last Tx DMA descriptor */
	int last_desc;

	/* Index of the next Tx DMA descriptor to process */
	int next_desc_to_proc;

	struct mv_pp2x *pp2;
};

struct mv_pp2x_rx_queue {
	/* RX queue number, in the range 0-31 for physical RXQs */
	u8 id;

	/* Num of rx descriptors in the rx descriptor ring */
	int size;

	u32 pkts_coal;

	/* Virtual address of the RX DMA descriptors array */
	struct mv_pp2x_rx_desc *descs;

	/* DMA address of the RX DMA descriptors array */
	dma_addr_t descs_phys;

	/* Index of the last RX DMA descriptor */
	int last_desc;

	/* Index of the next RX DMA descriptor to process */
	int next_desc_to_proc;

	/* ID of port to which physical RXQ is mapped */
	int port;

	/* Port's logic RXQ number to which physical RXQ is mapped */
	int logic_rxq;
};

union mv_pp2x_prs_tcam_entry {
	u32 word[MVPP2_PRS_TCAM_WORDS];
	u8  byte[MVPP2_PRS_TCAM_WORDS * 4];
};

union mv_pp2x_prs_sram_entry {
	u32 word[MVPP2_PRS_SRAM_WORDS];
	u8  byte[MVPP2_PRS_SRAM_WORDS * 4];
};

struct mv_pp2x_prs_entry {
	u32 index;
	union mv_pp2x_prs_tcam_entry tcam;
	union mv_pp2x_prs_sram_entry sram;
};

struct mv_pp2x_prs_shadow {
	bool valid;
	bool finish;

	/* Lookup ID */
	int lu;

	/* User defined offset */
	int udf;

	/* Result info */
	u32 ri;
	u32 ri_mask;
};

struct mv_pp2x_cls_flow_entry {
	u32 index;
	u32 data[MVPP2_CLS_FLOWS_TBL_DATA_WORDS];
};

struct mv_pp2x_cls_lkp_entry {
	u32 lkpid;
	u32 way;
	u32 data;
};

struct mv_pp2x_bm_pool {
	/* Pool number in the range 0-7 */
	int id;
	enum mv_pp2x_bm_type type;

	/* Buffer Pointers Pool External (BPPE) size */
	int size;
	/* Number of buffers for this pool */
	int buf_num;
	/* Pool buffer size */
	int buf_size;
	/* Packet size */
	int pkt_size;

	/* BPPE virtual base address */
	void *virt_addr;
	/* BPPE physical base address */
	unsigned long phys_addr;

	/* Ports using BM pool */
	u32 port_map;

	/* Occupied buffers indicator */
	atomic_t in_use;
	int in_use_thresh;

	spinlock_t lock;
};

struct mv_pp2x_buff_hdr {
	u32 next_buff_phys_addr;
	u32 next_buff_virt_addr;
	u16 byte_count;
	u16 info;
	u8  reserved1;		/* bm_qset (for future use, BM)		*/
};
/* Structure for preallocation for buffer */
struct buffer_location {
	struct mv_pp2x_tx_desc *tx_descs;
	struct mv_pp2x_tx_desc *aggr_tx_descs;
	struct mv_pp2x_rx_desc *rx_descs;
	dma_addr_t rx_buffers;
};

enum mv_pp2x_command {
	MVPP2_START,		/* Start     */
	MVPP2_STOP,		/* Stop     */
	MVPP2_PAUSE,		/* Pause    */
	MVPP2_RESTART		/* Restart  */
};

/* MAC entries, shadow udf */
enum mv_pp2x_prs_udf {
	MVPP2_PRS_UDF_MAC_DEF,
	MVPP2_PRS_UDF_MAC_RANGE,
	MVPP2_PRS_UDF_L2_DEF,
	MVPP2_PRS_UDF_L2_DEF_COPY,
	MVPP2_PRS_UDF_L2_USER,
};

/* Lookup ID */
enum mv_pp2x_prs_lookup {
	MVPP2_PRS_LU_MH,
	MVPP2_PRS_LU_MAC,
	MVPP2_PRS_LU_DSA,
	MVPP2_PRS_LU_VLAN,
	MVPP2_PRS_LU_L2,
	MVPP2_PRS_LU_PPPOE,
	MVPP2_PRS_LU_IP4,
	MVPP2_PRS_LU_IP6,
	MVPP2_PRS_LU_FLOWS,
	MVPP2_PRS_LU_LAST,
};

/* L3 cast enum */
enum mv_pp2x_prs_l3_cast {
	MVPP2_PRS_L3_UNI_CAST,
	MVPP2_PRS_L3_MULTI_CAST,
	MVPP2_PRS_L3_BROAD_CAST
};

/* BM configuration */
#define MVPP2_BM_POOL	    0
#define MVPP2_BM_SIZE	    32

/* Buffer header info bits */
#define MVPP2_B_HDR_INFO_MC_ID_MASK	0xfff
#define MVPP2_B_HDR_INFO_MC_ID(info)	((info) & MVPP2_B_HDR_INFO_MC_ID_MASK)
#define MVPP2_B_HDR_INFO_LAST_OFFS	12
#define MVPP2_B_HDR_INFO_LAST_MASK	BIT(12)
#define MVPP2_B_HDR_INFO_IS_LAST(info) \
	   ((info & MVPP2_B_HDR_INFO_LAST_MASK) >> MVPP2_B_HDR_INFO_LAST_OFFS)
/*
 * Page table entries are set to 1MB, or multiples of 1MB
 * (not < 1MB). driver uses less bd's so use 1MB bdspace.
 */
#define BD_SPACE	(1 << 20)

/* buffer has to be aligned to 1M */
#define MVPP2_BUFFER_ALIGN_SIZE	(1 << 20)

/* Gop related define */
/* Sets the field located at the specified in data.     */
#define U32_SET_FIELD(data, mask, val)	\
				((data) = (((data) & ~(mask)) | (val)))
#define MV_RGMII_TX_FIFO_MIN_TH		(0x41)
#define MV_SGMII_TX_FIFO_MIN_TH		(0x5)
#define MV_SGMII2_5_TX_FIFO_MIN_TH	(0xB)

/* port related */
enum mv_reset {RESET, UNRESET};

enum sd_media_mode {MV_RXAUI, MV_XAUI};

enum mv_port_duplex {
	MV_PORT_DUPLEX_AN,
	MV_PORT_DUPLEX_HALF,
	MV_PORT_DUPLEX_FULL
};

enum mv_port_fc {
	MV_PORT_FC_AN_NO,
	MV_PORT_FC_AN_SYM,
	MV_PORT_FC_AN_ASYM,
	MV_PORT_FC_DISABLE,
	MV_PORT_FC_ENABLE,
	MV_PORT_FC_ACTIVE
};

/* Net Complex */
enum mv_netc_topology {
	MV_NETC_GE_MAC0_RXAUI_L23	=	BIT(0),
	MV_NETC_GE_MAC0_RXAUI_L45	=	BIT(1),
	MV_NETC_GE_MAC0_XAUI		=	BIT(2),
	MV_NETC_GE_MAC2_SGMII		=	BIT(3),
	MV_NETC_GE_MAC3_SGMII		=	BIT(4),
	MV_NETC_GE_MAC3_RGMII		=	BIT(5),
};

enum mv_netc_phase {
	MV_NETC_FIRST_PHASE,
	MV_NETC_SECOND_PHASE,
};

enum mv_netc_sgmii_xmi_mode {
	MV_NETC_GBE_SGMII,
	MV_NETC_GBE_XMII,
};

enum mv_netc_mii_mode {
	MV_NETC_GBE_RGMII,
	MV_NETC_GBE_MII,
};

enum mv_netc_lanes {
	MV_NETC_LANE_23,
	MV_NETC_LANE_45,
};
